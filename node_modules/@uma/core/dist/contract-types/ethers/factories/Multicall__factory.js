"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Multicall__factory = void 0;
const ethers_1 = require("ethers");
class Multicall__factory extends ethers_1.ContractFactory {
    constructor(signer) {
        super(_abi, _bytecode, signer);
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Multicall__factory = Multicall__factory;
const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "target",
                        type: "address",
                    },
                    {
                        internalType: "bytes",
                        name: "callData",
                        type: "bytes",
                    },
                ],
                internalType: "struct Multicall.Call[]",
                name: "calls",
                type: "tuple[]",
            },
        ],
        name: "aggregate",
        outputs: [
            {
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256",
            },
            {
                internalType: "bytes[]",
                name: "returnData",
                type: "bytes[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610322806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063252dba4214610030575b600080fd5b61004761003e36600461011a565b60006060915091565b6040516100559291906101dc565b60405180910390f35b60006040828403121561006f578081fd5b61007761027c565b905081356001600160a01b038116811461009057600080fd5b815260208281013567ffffffffffffffff808211156100ae57600080fd5b818501915085601f8301126100c257600080fd5b8135818111156100d4576100d46102d6565b6100e6601f8201601f191685016102a5565b915080825286848285010111156100fc57600080fd5b80848401858401376000908201840152918301919091525092915050565b6000602080838503121561012c578182fd5b823567ffffffffffffffff80821115610143578384fd5b818501915085601f830112610156578384fd5b813581811115610168576101686102d6565b8060051b6101778582016102a5565b8281528581019085870183870188018b1015610191578889fd5b8893505b848410156101ce578035868111156101ab57898afd5b6101b98c8a838b010161005e565b84525060019390930192918701918701610195565b509998505050505050505050565b600060408201848352602060408185015281855180845260608601915060608160051b8701019350828701855b8281101561026e57878603605f1901845281518051808852885b8181101561023e578281018801518982018901528701610223565b8181111561024e578988838b0101525b50601f01601f191696909601850195509284019290840190600101610209565b509398975050505050505050565b6040805190810167ffffffffffffffff8111828210171561029f5761029f6102d6565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156102ce576102ce6102d6565b604052919050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a536afd983b6321631391e85b73482acd1551a12fdbc59dce405e3d6578c67e464736f6c63430008040033";

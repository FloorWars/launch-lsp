/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OptimisticOracleInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "ancillaryBytesLimit()": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes,address,uint256)": FunctionFragment;
    "setBond(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setRefundOnDispute(bytes32,uint256,bytes)": FunctionFragment;
    "setCustomLiveness(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "proposePrice(address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "disputePriceFor(address,address,bytes32,uint256,bytes)": FunctionFragment;
    "disputePrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "settleAndGetPrice(bytes32,uint256,bytes)": FunctionFragment;
    "settle(address,bytes32,uint256,bytes)": FunctionFragment;
    "getRequest(address,bytes32,uint256,bytes)": FunctionFragment;
    "getState(address,bytes32,uint256,bytes)": FunctionFragment;
    "hasPrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "stampAncillaryData(bytes,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBond",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundOnDispute",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomLiveness",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePriceFor",
    values: [string, string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePrice",
    values: [string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputePriceFor",
    values: [string, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disputePrice",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndGetPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stampAncillaryData",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRefundOnDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAndGetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stampAncillaryData",
    data: BytesLike
  ): Result;

  events: {};
}

export class OptimisticOracleInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OptimisticOracleInterfaceInterface;

  functions: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ancillaryBytesLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    "requestPrice(bytes32,uint256,bytes,address,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setBond(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setRefundOnDispute(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setCustomLiveness(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)"(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePrice(address,bytes32,uint256,bytes,int256)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePriceFor(address,address,bytes32,uint256,bytes)"(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settleAndGetPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settle(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          proposer: string;
          disputer: string;
          currency: string;
          settled: boolean;
          refundOnDispute: boolean;
          proposedPrice: BigNumber;
          resolvedPrice: BigNumber;
          expirationTime: BigNumber;
          reward: BigNumber;
          finalFee: BigNumber;
          bond: BigNumber;
          customLiveness: BigNumber;
        }
      ]
    >;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getRequest(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          proposer: string;
          disputer: string;
          currency: string;
          settled: boolean;
          refundOnDispute: boolean;
          proposedPrice: BigNumber;
          resolvedPrice: BigNumber;
          expirationTime: BigNumber;
          reward: BigNumber;
          finalFee: BigNumber;
          bond: BigNumber;
          customLiveness: BigNumber;
        }
      ]
    >;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getState(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "hasPrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stampAncillaryData(bytes,address)"(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "ancillaryBytesLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Requests a new price.
   * @param ancillaryData ancillary data representing additional args being passed with the price request.
   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
   * @param identifier price identifier being requested.
   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
   * @param timestamp timestamp of the price being requested.
   */
  requestPrice(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    currency: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Requests a new price.
   * @param ancillaryData ancillary data representing additional args being passed with the price request.
   * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
   * @param identifier price identifier being requested.
   * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
   * @param timestamp timestamp of the price being requested.
   */
  "requestPrice(bytes32,uint256,bytes,address,uint256)"(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    currency: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the proposal bond associated with a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param bond custom bond amount to set.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  setBond(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    bond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set the proposal bond associated with a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param bond custom bond amount to set.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  "setBond(bytes32,uint256,bytes,uint256)"(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    bond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  setRefundOnDispute(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  "setRefundOnDispute(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
   * @param ancillaryData ancillary data of the price being requested.
   * @param customLiveness new custom liveness.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  setCustomLiveness(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    customLiveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
   * @param ancillaryData ancillary data of the price being requested.
   * @param customLiveness new custom liveness.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  "setCustomLiveness(bytes32,uint256,bytes,uint256)"(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    customLiveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param proposedPrice price being proposed.
   * @param proposer address to set as the proposer.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  proposePriceFor(
    proposer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param proposedPrice price being proposed.
   * @param proposer address to set as the proposer.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "proposePriceFor(address,address,bytes32,uint256,bytes,int256)"(
    proposer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Proposes a price value for an existing price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param proposedPrice price being proposed.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  proposePrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Proposes a price value for an existing price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param proposedPrice price being proposed.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "proposePrice(address,bytes32,uint256,bytes,int256)"(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    proposedPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
   * @param ancillaryData ancillary data of the price being requested.
   * @param disputer address to set as the disputer.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  disputePriceFor(
    disputer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
   * @param ancillaryData ancillary data of the price being requested.
   * @param disputer address to set as the disputer.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "disputePriceFor(address,address,bytes32,uint256,bytes)"(
    disputer: string,
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Disputes a price value for an existing price request with an active proposal.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  disputePrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Disputes a price value for an existing price request with an active proposal.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "disputePrice(address,bytes32,uint256,bytes)"(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  settleAndGetPrice(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param timestamp timestamp to identify the existing request.
   */
  "settleAndGetPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  settle(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "settle(address,bytes32,uint256,bytes)"(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the current data structure containing all information about a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  getRequest(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      refundOnDispute: boolean;
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
      bond: BigNumber;
      customLiveness: BigNumber;
    }
  >;

  /**
   * Gets the current data structure containing all information about a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "getRequest(address,bytes32,uint256,bytes)"(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      refundOnDispute: boolean;
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
      bond: BigNumber;
      customLiveness: BigNumber;
    }
  >;

  /**
   * Returns the state of a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  getState(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * Returns the state of a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "getState(address,bytes32,uint256,bytes)"(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  hasPrice(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier to identify the existing request.
   * @param requester sender of the initial price request.
   * @param timestamp timestamp to identify the existing request.
   */
  "hasPrice(address,bytes32,uint256,bytes)"(
    requester: string,
    identifier: BytesLike,
    timestamp: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stampAncillaryData(
    ancillaryData: BytesLike,
    requester: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "stampAncillaryData(bytes,address)"(
    ancillaryData: BytesLike,
    requester: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "ancillaryBytesLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    "requestPrice(bytes32,uint256,bytes,address,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setBond(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setRefundOnDispute(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setCustomLiveness(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)"(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePrice(address,bytes32,uint256,bytes,int256)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePriceFor(address,address,bytes32,uint256,bytes)"(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settleAndGetPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settle(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        refundOnDispute: boolean;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
        bond: BigNumber;
        customLiveness: BigNumber;
      }
    >;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getRequest(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        refundOnDispute: boolean;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
        bond: BigNumber;
        customLiveness: BigNumber;
      }
    >;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getState(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "hasPrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "stampAncillaryData(bytes,address)"(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "ancillaryBytesLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    "requestPrice(bytes32,uint256,bytes,address,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setBond(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setRefundOnDispute(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setCustomLiveness(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)"(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePrice(address,bytes32,uint256,bytes,int256)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePriceFor(address,address,bytes32,uint256,bytes)"(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settleAndGetPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settle(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getRequest(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getState(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "hasPrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stampAncillaryData(bytes,address)"(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ancillaryBytesLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ancillaryBytesLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    requestPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Requests a new price.
     * @param ancillaryData ancillary data representing additional args being passed with the price request.
     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.
     * @param identifier price identifier being requested.
     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.
     * @param timestamp timestamp of the price being requested.
     */
    "requestPrice(bytes32,uint256,bytes,address,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      currency: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setBond(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the proposal bond associated with a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param bond custom bond amount to set.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setBond(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      bond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setRefundOnDispute(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the request to refund the reward if the proposal is disputed. This can help to "hedge" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setRefundOnDispute(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    setCustomLiveness(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.
     * @param ancillaryData ancillary data of the price being requested.
     * @param customLiveness new custom liveness.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "setCustomLiveness(bytes32,uint256,bytes,uint256)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      customLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePriceFor(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param proposer address to set as the proposer.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)"(
      proposer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    proposePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Proposes a price value for an existing price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param proposedPrice price being proposed.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "proposePrice(address,bytes32,uint256,bytes,int256)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      proposedPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePriceFor(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.
     * @param ancillaryData ancillary data of the price being requested.
     * @param disputer address to set as the disputer.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePriceFor(address,address,bytes32,uint256,bytes)"(
      disputer: string,
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    disputePrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Disputes a price value for an existing price request with an active proposal.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "disputePrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    settleAndGetPrice(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settleAndGetPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    settle(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Attempts to settle an outstanding price request. Will revert if it isn't settleable.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "settle(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getRequest(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the current data structure containing all information about a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getRequest(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    getState(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the state of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "getState(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    hasPrice(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier to identify the existing request.
     * @param requester sender of the initial price request.
     * @param timestamp timestamp to identify the existing request.
     */
    "hasPrice(address,bytes32,uint256,bytes)"(
      requester: string,
      identifier: BytesLike,
      timestamp: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stampAncillaryData(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stampAncillaryData(bytes,address)"(
      ancillaryData: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

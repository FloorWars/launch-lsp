/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ExpiringMultiPartyCreatorInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentTime()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "tokenFactoryAddress()": FunctionFragment;
    "createExpiringMultiParty(tuple)": FunctionFragment;
    "_getSyntheticDecimals(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createExpiringMultiParty",
    values: [
      {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getSyntheticDecimals",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createExpiringMultiParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getSyntheticDecimals",
    data: BytesLike
  ): Result;

  events: {
    "CreatedExpiringMultiParty(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedExpiringMultiParty"): EventFragment;
}

export class ExpiringMultiPartyCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExpiringMultiPartyCreatorInterface;

  functions: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    tokenFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactoryAddress()"(overrides?: CallOverrides): Promise<[string]>;

    createExpiringMultiParty(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createExpiringMultiParty((uint256,address,bytes32,string,string,(uint256),(uint256),(uint256),(uint256),(uint256),uint256,uint256,address))"(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _getSyntheticDecimals(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<[number] & { decimals: number }>;

    "_getSyntheticDecimals(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<[number] & { decimals: number }>;
  };

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  tokenFactoryAddress(overrides?: CallOverrides): Promise<string>;

  "tokenFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

  createExpiringMultiParty(
    params: {
      expirationTimestamp: BigNumberish;
      collateralAddress: string;
      priceFeedIdentifier: BytesLike;
      syntheticName: string;
      syntheticSymbol: string;
      collateralRequirement: { rawValue: BigNumberish };
      disputeBondPercentage: { rawValue: BigNumberish };
      sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
      disputerDisputeRewardPercentage: { rawValue: BigNumberish };
      minSponsorTokens: { rawValue: BigNumberish };
      withdrawalLiveness: BigNumberish;
      liquidationLiveness: BigNumberish;
      financialProductLibraryAddress: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createExpiringMultiParty((uint256,address,bytes32,string,string,(uint256),(uint256),(uint256),(uint256),(uint256),uint256,uint256,address))"(
    params: {
      expirationTimestamp: BigNumberish;
      collateralAddress: string;
      priceFeedIdentifier: BytesLike;
      syntheticName: string;
      syntheticSymbol: string;
      collateralRequirement: { rawValue: BigNumberish };
      disputeBondPercentage: { rawValue: BigNumberish };
      sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
      disputerDisputeRewardPercentage: { rawValue: BigNumberish };
      minSponsorTokens: { rawValue: BigNumberish };
      withdrawalLiveness: BigNumberish;
      liquidationLiveness: BigNumberish;
      financialProductLibraryAddress: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _getSyntheticDecimals(
    _collateralAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "_getSyntheticDecimals(address)"(
    _collateralAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    tokenFactoryAddress(overrides?: CallOverrides): Promise<string>;

    "tokenFactoryAddress()"(overrides?: CallOverrides): Promise<string>;

    createExpiringMultiParty(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "createExpiringMultiParty((uint256,address,bytes32,string,string,(uint256),(uint256),(uint256),(uint256),(uint256),uint256,uint256,address))"(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _getSyntheticDecimals(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "_getSyntheticDecimals(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    CreatedExpiringMultiParty(
      expiringMultiPartyAddress: string | null,
      deployerAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { expiringMultiPartyAddress: string; deployerAddress: string }
    >;
  };

  estimateGas: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    createExpiringMultiParty(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createExpiringMultiParty((uint256,address,bytes32,string,string,(uint256),(uint256),(uint256),(uint256),(uint256),uint256,uint256,address))"(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _getSyntheticDecimals(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_getSyntheticDecimals(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenFactoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createExpiringMultiParty(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createExpiringMultiParty((uint256,address,bytes32,string,string,(uint256),(uint256),(uint256),(uint256),(uint256),uint256,uint256,address))"(
      params: {
        expirationTimestamp: BigNumberish;
        collateralAddress: string;
        priceFeedIdentifier: BytesLike;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: BigNumberish };
        disputeBondPercentage: { rawValue: BigNumberish };
        sponsorDisputeRewardPercentage: { rawValue: BigNumberish };
        disputerDisputeRewardPercentage: { rawValue: BigNumberish };
        minSponsorTokens: { rawValue: BigNumberish };
        withdrawalLiveness: BigNumberish;
        liquidationLiveness: BigNumberish;
        financialProductLibraryAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _getSyntheticDecimals(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_getSyntheticDecimals(address)"(
      _collateralAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

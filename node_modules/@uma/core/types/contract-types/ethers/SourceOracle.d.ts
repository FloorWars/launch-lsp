/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SourceOracleInterface extends ethers.utils.Interface {
  functions: {
    "currentChainID()": FunctionFragment;
    "finder()": FunctionFragment;
    "publishPrice(uint8,bytes32,uint256,bytes)": FunctionFragment;
    "validateDeposit(uint8,bytes32,uint256,bytes,int256)": FunctionFragment;
    "executeRequestPrice(uint8,bytes32,uint256,bytes)": FunctionFragment;
    "getResourceId()": FunctionFragment;
    "formatMetadata(uint8,bytes32,uint256,bytes,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentChainID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishPrice",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDeposit",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRequestPrice",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "formatMetadata",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRequestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatMetadata",
    data: BytesLike
  ): Result;

  events: {
    "PriceRequestAdded(uint8,bytes32,uint256,bytes)": EventFragment;
    "PushedPrice(uint8,bytes32,uint256,bytes,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushedPrice"): EventFragment;
}

export class SourceOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SourceOracleInterface;

  functions: {
    currentChainID(overrides?: CallOverrides): Promise<[number]>;

    "currentChainID()"(overrides?: CallOverrides): Promise<[number]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "publishPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    executeRequestPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    "executeRequestPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    getResourceId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes,int256)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  currentChainID(overrides?: CallOverrides): Promise<number>;

  "currentChainID()"(overrides?: CallOverrides): Promise<number>;

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
   * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
   * @param time Timestamp of price request to resolve.
   */
  publishPrice(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
   * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
   * @param time Timestamp of price request to resolve.
   */
  "publishPrice(uint8,bytes32,uint256,bytes)"(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
   * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param price Price resolved on DVM to send to SinkOracle.
   * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
   * @param time Timestamp of price request to resolve.
   */
  validateDeposit(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
   * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param price Price resolved on DVM to send to SinkOracle.
   * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
   * @param time Timestamp of price request to resolve.
   */
  "validateDeposit(uint8,bytes32,uint256,bytes,int256)"(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
   * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
   * @param time Timestamp of price request.
   */
  executeRequestPrice(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
   * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
   * @param time Timestamp of price request.
   */
  "executeRequestPrice(uint8,bytes32,uint256,bytes)"(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
   */
  getResourceId(overrides?: CallOverrides): Promise<string>;

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
   */
  "getResourceId()"(overrides?: CallOverrides): Promise<string>;

  /**
   * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
   * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
   * @param ancillaryData extra data of price request to publish.
   * @param chainID Chain ID of SinkOracle to publish price to.
   * @param identifier Identifier of price request to publish.
   * @param time Timestamp of price request to publish.
   */
  formatMetadata(
    chainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
   * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
   * @param ancillaryData extra data of price request to publish.
   * @param chainID Chain ID of SinkOracle to publish price to.
   * @param identifier Identifier of price request to publish.
   * @param time Timestamp of price request to publish.
   */
  "formatMetadata(uint8,bytes32,uint256,bytes,int256)"(
    chainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    currentChainID(overrides?: CallOverrides): Promise<number>;

    "currentChainID()"(overrides?: CallOverrides): Promise<number>;

    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "publishPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    executeRequestPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    "executeRequestPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    getResourceId(overrides?: CallOverrides): Promise<string>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<string>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes,int256)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    PriceRequestAdded(
      chainID: BigNumberish | null,
      identifier: BytesLike | null,
      time: null,
      ancillaryData: null
    ): TypedEventFilter<
      [number, string, BigNumber, string],
      {
        chainID: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    PushedPrice(
      chainID: BigNumberish | null,
      identifier: BytesLike | null,
      time: null,
      ancillaryData: null,
      price: null
    ): TypedEventFilter<
      [number, string, BigNumber, string, BigNumber],
      {
        chainID: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    currentChainID(overrides?: CallOverrides): Promise<BigNumber>;

    "currentChainID()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "publishPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    executeRequestPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    "executeRequestPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    getResourceId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes,int256)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentChainID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "publishPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    executeRequestPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    "executeRequestPrice(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    getResourceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes,int256)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

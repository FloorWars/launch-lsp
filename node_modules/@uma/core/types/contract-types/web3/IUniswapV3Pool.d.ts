/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Burn = ContractEventLog<{
  owner: string;
  tickLower: string;
  tickUpper: string;
  amount: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Collect = ContractEventLog<{
  owner: string;
  recipient: string;
  tickLower: string;
  tickUpper: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type CollectProtocol = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Flash = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  paid0: string;
  paid1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type IncreaseObservationCardinalityNext = ContractEventLog<{
  observationCardinalityNextOld: string;
  observationCardinalityNextNew: string;
  0: string;
  1: string;
}>;
export type Initialize = ContractEventLog<{
  sqrtPriceX96: string;
  tick: string;
  0: string;
  1: string;
}>;
export type Mint = ContractEventLog<{
  sender: string;
  owner: string;
  tickLower: string;
  tickUpper: string;
  amount: string;
  amount0: string;
  amount1: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type SetFeeProtocol = ContractEventLog<{
  feeProtocol0Old: string;
  feeProtocol1Old: string;
  feeProtocol0New: string;
  feeProtocol1New: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Swap = ContractEventLog<{
  sender: string;
  recipient: string;
  amount0: string;
  amount1: string;
  sqrtPriceX96: string;
  tick: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;

export interface IUniswapV3Pool extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IUniswapV3Pool;
  clone(): IUniswapV3Pool;
  methods: {
    /**
     * Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect
     * Burn liquidity from the sender and account tokens owed for the liquidity to the position
     * @param amount How much liquidity to burn
     * @param tickLower The lower tick of the position for which to burn liquidity
     * @param tickUpper The upper tick of the position for which to burn liquidity
     */
    burn(
      tickLower: number | string | BN,
      tickUpper: number | string | BN,
      amount: number | string | BN
    ): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    /**
     * Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.
     * Collects tokens owed to a position
     * @param amount0Requested How much token0 should be withdrawn from the fees owed
     * @param amount1Requested How much token1 should be withdrawn from the fees owed
     * @param recipient The address which should receive the fees collected
     * @param tickLower The lower tick of the position for which to collect fees
     * @param tickUpper The upper tick of the position for which to collect fees
     */
    collect(
      recipient: string,
      tickLower: number | string | BN,
      tickUpper: number | string | BN,
      amount0Requested: number | string | BN,
      amount1Requested: number | string | BN
    ): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    /**
     * Collect the protocol fee accrued to the pool
     * @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1
     * @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0
     * @param recipient The address to which collected protocol fees should be sent
     */
    collectProtocol(
      recipient: string,
      amount0Requested: number | string | BN,
      amount1Requested: number | string | BN
    ): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    /**
     * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
     */
    factory(): NonPayableTransactionObject<string>;

    /**
     * The pool's fee in hundredths of a bip, i.e. 1e-6
     */
    fee(): NonPayableTransactionObject<string>;

    /**
     * This value can overflow the uint256
     * The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool
     */
    feeGrowthGlobal0X128(): NonPayableTransactionObject<string>;

    /**
     * This value can overflow the uint256
     * The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool
     */
    feeGrowthGlobal1X128(): NonPayableTransactionObject<string>;

    /**
     * The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback
     * Receive token0 and/or token1 and pay it back, plus a fee, in the callback
     * @param amount0 The amount of token0 to send
     * @param amount1 The amount of token1 to send
     * @param data Any data to be passed through to the callback
     * @param recipient The address which will receive the token0 and token1 amounts
     */
    flash(
      recipient: string,
      amount0: number | string | BN,
      amount1: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.
     * Increase the maximum number of price and liquidity observations that this pool will store
     * @param observationCardinalityNext The desired minimum number of observations for the pool to store
     */
    increaseObservationCardinalityNext(
      observationCardinalityNext: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value
     * Sets the initial price for the pool
     * @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96
     */
    initialize(
      sqrtPriceX96: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * This value has no relationship to the total liquidity across all ticks
     * The currently in range liquidity available to the pool
     */
    liquidity(): NonPayableTransactionObject<string>;

    /**
     * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
     * The maximum amount of position liquidity that can use any tick in the range
     */
    maxLiquidityPerTick(): NonPayableTransactionObject<string>;

    /**
     * The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.
     * Adds liquidity for the given recipient/tickLower/tickUpper position
     * @param amount The amount of liquidity to mint
     * @param data Any data that should be passed through to the callback
     * @param recipient The address for which the liquidity will be created
     * @param tickLower The lower tick of the position in which to add liquidity
     * @param tickUpper The upper tick of the position in which to add liquidity
     */
    mint(
      recipient: string,
      tickLower: number | string | BN,
      tickUpper: number | string | BN,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    /**
     * You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.
     * Returns data about a specific observation index
     * @param index The element of the observations array to fetch
     */
    observations(
      index: number | string | BN
    ): NonPayableTransactionObject<{
      blockTimestamp: string;
      tickCumulative: string;
      secondsPerLiquidityCumulativeX128: string;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    /**
     * To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
     * Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
     * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
     */
    observe(
      secondsAgos: (number | string | BN)[]
    ): NonPayableTransactionObject<{
      tickCumulatives: string[];
      secondsPerLiquidityCumulativeX128s: string[];
      0: string[];
      1: string[];
    }>;

    /**
     * Returns the information about a position by the position's key
     * @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper
     */
    positions(
      key: string | number[]
    ): NonPayableTransactionObject<{
      _liquidity: string;
      feeGrowthInside0LastX128: string;
      feeGrowthInside1LastX128: string;
      tokensOwed0: string;
      tokensOwed1: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    /**
     * Protocol fees will never exceed uint128 max in either token
     * The amounts of token0 and token1 that are owed to the protocol
     */
    protocolFees(): NonPayableTransactionObject<{
      token0: string;
      token1: string;
      0: string;
      1: string;
    }>;

    /**
     * Set the denominator of the protocol's % share of the fees
     * @param feeProtocol0 new protocol fee for token0 of the pool
     * @param feeProtocol1 new protocol fee for token1 of the pool
     */
    setFeeProtocol(
      feeProtocol0: number | string | BN,
      feeProtocol1: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.
     */
    slot0(): NonPayableTransactionObject<{
      sqrtPriceX96: string;
      tick: string;
      observationIndex: string;
      observationCardinality: string;
      observationCardinalityNext: string;
      feeProtocol: string;
      unlocked: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    /**
     * Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.
     * Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
     * @param tickLower The lower tick of the range
     * @param tickUpper The upper tick of the range
     */
    snapshotCumulativesInside(
      tickLower: number | string | BN,
      tickUpper: number | string | BN
    ): NonPayableTransactionObject<{
      tickCumulativeInside: string;
      secondsPerLiquidityInsideX128: string;
      secondsInside: string;
      0: string;
      1: string;
      2: string;
    }>;

    /**
     * The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback
     * Swap token0 for token1, or token1 for token0
     * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)
     * @param data Any data to be passed through to the callback
     * @param recipient The address to receive the output of the swap
     * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap
     * @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0
     */
    swap(
      recipient: string,
      zeroForOne: boolean,
      amountSpecified: number | string | BN,
      sqrtPriceLimitX96: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<{
      amount0: string;
      amount1: string;
      0: string;
      1: string;
    }>;

    /**
     * Returns 256 packed tick initialized boolean values. See TickBitmap for more information
     */
    tickBitmap(
      wordPosition: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
     * The pool tick spacing
     */
    tickSpacing(): NonPayableTransactionObject<string>;

    /**
     * Look up information about a specific tick in the pool
     * @param tick The tick to look up
     */
    ticks(
      tick: number | string | BN
    ): NonPayableTransactionObject<{
      liquidityGross: string;
      liquidityNet: string;
      feeGrowthOutside0X128: string;
      feeGrowthOutside1X128: string;
      tickCumulativeOutside: string;
      secondsPerLiquidityOutsideX128: string;
      secondsOutside: string;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
    }>;

    /**
     * The first of the two tokens of the pool, sorted by address
     */
    token0(): NonPayableTransactionObject<string>;

    /**
     * The second of the two tokens of the pool, sorted by address
     */
    token1(): NonPayableTransactionObject<string>;
  };
  events: {
    Burn(cb?: Callback<Burn>): EventEmitter;
    Burn(options?: EventOptions, cb?: Callback<Burn>): EventEmitter;

    Collect(cb?: Callback<Collect>): EventEmitter;
    Collect(options?: EventOptions, cb?: Callback<Collect>): EventEmitter;

    CollectProtocol(cb?: Callback<CollectProtocol>): EventEmitter;
    CollectProtocol(
      options?: EventOptions,
      cb?: Callback<CollectProtocol>
    ): EventEmitter;

    Flash(cb?: Callback<Flash>): EventEmitter;
    Flash(options?: EventOptions, cb?: Callback<Flash>): EventEmitter;

    IncreaseObservationCardinalityNext(
      cb?: Callback<IncreaseObservationCardinalityNext>
    ): EventEmitter;
    IncreaseObservationCardinalityNext(
      options?: EventOptions,
      cb?: Callback<IncreaseObservationCardinalityNext>
    ): EventEmitter;

    Initialize(cb?: Callback<Initialize>): EventEmitter;
    Initialize(options?: EventOptions, cb?: Callback<Initialize>): EventEmitter;

    Mint(cb?: Callback<Mint>): EventEmitter;
    Mint(options?: EventOptions, cb?: Callback<Mint>): EventEmitter;

    SetFeeProtocol(cb?: Callback<SetFeeProtocol>): EventEmitter;
    SetFeeProtocol(
      options?: EventOptions,
      cb?: Callback<SetFeeProtocol>
    ): EventEmitter;

    Swap(cb?: Callback<Swap>): EventEmitter;
    Swap(options?: EventOptions, cb?: Callback<Swap>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Burn", cb: Callback<Burn>): void;
  once(event: "Burn", options: EventOptions, cb: Callback<Burn>): void;

  once(event: "Collect", cb: Callback<Collect>): void;
  once(event: "Collect", options: EventOptions, cb: Callback<Collect>): void;

  once(event: "CollectProtocol", cb: Callback<CollectProtocol>): void;
  once(
    event: "CollectProtocol",
    options: EventOptions,
    cb: Callback<CollectProtocol>
  ): void;

  once(event: "Flash", cb: Callback<Flash>): void;
  once(event: "Flash", options: EventOptions, cb: Callback<Flash>): void;

  once(
    event: "IncreaseObservationCardinalityNext",
    cb: Callback<IncreaseObservationCardinalityNext>
  ): void;
  once(
    event: "IncreaseObservationCardinalityNext",
    options: EventOptions,
    cb: Callback<IncreaseObservationCardinalityNext>
  ): void;

  once(event: "Initialize", cb: Callback<Initialize>): void;
  once(
    event: "Initialize",
    options: EventOptions,
    cb: Callback<Initialize>
  ): void;

  once(event: "Mint", cb: Callback<Mint>): void;
  once(event: "Mint", options: EventOptions, cb: Callback<Mint>): void;

  once(event: "SetFeeProtocol", cb: Callback<SetFeeProtocol>): void;
  once(
    event: "SetFeeProtocol",
    options: EventOptions,
    cb: Callback<SetFeeProtocol>
  ): void;

  once(event: "Swap", cb: Callback<Swap>): void;
  once(event: "Swap", options: EventOptions, cb: Callback<Swap>): void;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IUniswapV3PoolState extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IUniswapV3PoolState;
  clone(): IUniswapV3PoolState;
  methods: {
    /**
     * The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.
     */
    slot0(): NonPayableTransactionObject<{
      sqrtPriceX96: string;
      tick: string;
      observationIndex: string;
      observationCardinality: string;
      observationCardinalityNext: string;
      feeProtocol: string;
      unlocked: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    /**
     * This value can overflow the uint256
     * The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool
     */
    feeGrowthGlobal0X128(): NonPayableTransactionObject<string>;

    /**
     * This value can overflow the uint256
     * The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool
     */
    feeGrowthGlobal1X128(): NonPayableTransactionObject<string>;

    /**
     * Protocol fees will never exceed uint128 max in either token
     * The amounts of token0 and token1 that are owed to the protocol
     */
    protocolFees(): NonPayableTransactionObject<{
      token0: string;
      token1: string;
      0: string;
      1: string;
    }>;

    /**
     * This value has no relationship to the total liquidity across all ticks
     * The currently in range liquidity available to the pool
     */
    liquidity(): NonPayableTransactionObject<string>;

    /**
     * Look up information about a specific tick in the pool
     * @param tick The tick to look up
     */
    ticks(
      tick: number | string | BN
    ): NonPayableTransactionObject<{
      liquidityGross: string;
      liquidityNet: string;
      feeGrowthOutside0X128: string;
      feeGrowthOutside1X128: string;
      tickCumulativeOutside: string;
      secondsPerLiquidityOutsideX128: string;
      secondsOutside: string;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: boolean;
    }>;

    /**
     * Returns 256 packed tick initialized boolean values. See TickBitmap for more information
     */
    tickBitmap(
      wordPosition: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Returns the information about a position by the position's key
     * @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper
     */
    positions(
      key: string | number[]
    ): NonPayableTransactionObject<{
      _liquidity: string;
      feeGrowthInside0LastX128: string;
      feeGrowthInside1LastX128: string;
      tokensOwed0: string;
      tokensOwed1: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    /**
     * You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.
     * Returns data about a specific observation index
     * @param index The element of the observations array to fetch
     */
    observations(
      index: number | string | BN
    ): NonPayableTransactionObject<{
      blockTimestamp: string;
      tickCumulative: string;
      secondsPerLiquidityCumulativeX128: string;
      initialized: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

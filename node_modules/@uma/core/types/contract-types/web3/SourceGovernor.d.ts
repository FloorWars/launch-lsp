/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RelayedGovernanceRequest = ContractEventLog<{
  destinationChainId: string;
  to: string;
  data: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SourceGovernor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SourceGovernor;
  clone(): SourceGovernor;
  methods: {
    currentChainId(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    relayGovernance(
      destinationChainId: number | string | BN,
      to: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    verifyRequest(
      to: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    getResourceId(): NonPayableTransactionObject<string>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RelayedGovernanceRequest(
      cb?: Callback<RelayedGovernanceRequest>
    ): EventEmitter;
    RelayedGovernanceRequest(
      options?: EventOptions,
      cb?: Callback<RelayedGovernanceRequest>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "RelayedGovernanceRequest",
    cb: Callback<RelayedGovernanceRequest>
  ): void;
  once(
    event: "RelayedGovernanceRequest",
    options: EventOptions,
    cb: Callback<RelayedGovernanceRequest>
  ): void;
}

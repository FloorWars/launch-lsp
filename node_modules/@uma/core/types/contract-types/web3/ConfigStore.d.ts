/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ChangedConfigSettings = ContractEventLog<{
  rewardRatePerSecond: string;
  proposerBondPercentage: string;
  timelockLiveness: string;
  maxFundingRate: string;
  minFundingRate: string;
  proposalTimePastLimit: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ProposedNewConfigSettings = ContractEventLog<{
  proposer: string;
  rewardRatePerSecond: string;
  proposerBondPercentage: string;
  timelockLiveness: string;
  maxFundingRate: string;
  minFundingRate: string;
  proposalTimePastLimit: string;
  proposalPassedTimestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
}>;

export interface ConfigStore extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ConfigStore;
  clone(): ConfigStore;
  methods: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    pendingConfig(): NonPayableTransactionObject<{
      timelockLiveness: string;
      rewardRatePerSecond: [string];
      proposerBondPercentage: [string];
      maxFundingRate: [string];
      minFundingRate: [string];
      proposalTimePastLimit: string;
      0: string;
      1: [string];
      2: [string];
      3: [string];
      4: [string];
      5: string;
    }>;

    pendingPassedTimestamp(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    timerAddress(): NonPayableTransactionObject<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    updateAndGetCurrentConfig(): NonPayableTransactionObject<
      [string, [string], [string], [string], [string], string]
    >;

    proposeNewConfig(
      newConfig: [
        number | string | BN,
        [number | string | BN],
        [number | string | BN],
        [number | string | BN],
        [number | string | BN],
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    publishPendingConfig(): NonPayableTransactionObject<void>;
  };
  events: {
    ChangedConfigSettings(cb?: Callback<ChangedConfigSettings>): EventEmitter;
    ChangedConfigSettings(
      options?: EventOptions,
      cb?: Callback<ChangedConfigSettings>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ProposedNewConfigSettings(
      cb?: Callback<ProposedNewConfigSettings>
    ): EventEmitter;
    ProposedNewConfigSettings(
      options?: EventOptions,
      cb?: Callback<ProposedNewConfigSettings>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ChangedConfigSettings",
    cb: Callback<ChangedConfigSettings>
  ): void;
  once(
    event: "ChangedConfigSettings",
    options: EventOptions,
    cb: Callback<ChangedConfigSettings>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "ProposedNewConfigSettings",
    cb: Callback<ProposedNewConfigSettings>
  ): void;
  once(
    event: "ProposedNewConfigSettings",
    options: EventOptions,
    cb: Callback<ProposedNewConfigSettings>
  ): void;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RangeBondLongShortPairFinancialProductLibraryContract
  extends Truffle.Contract<RangeBondLongShortPairFinancialProductLibraryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RangeBondLongShortPairFinancialProductLibraryInstance>;
}

type AllEvents = never;

export interface RangeBondLongShortPairFinancialProductLibraryInstance
  extends Truffle.ContractInstance {
  longShortPairParameters(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * between highPriceRange and lowPriceRange the contract will payout a fixed amount of lowPriceRange*collateralPerPair (i.e the "notional" of the yield dollar).Note: a) Any address can set these parameters b) existing LSP parameters for address not set. c) highPriceRange > lowPriceRange. d) parameters price can only be set once to prevent the deployer from changing the parameters after the fact. e) For safety, a parameters should be set before depositing any synthetic tokens in a liquidity pool. f) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
   * Enables any address to set the parameters price for an associated financial product.
   * @param highPriceRange high price range after which the payout transforms from a yield dollar to a call option.
   * @param longShortPair address of the LSP contract.
   * @param lowPriceRange low price range below which the payout transforms from a yield dollar to a short put option.
   */
  setLongShortPairParameters: {
    (
      longShortPair: string,
      highPriceRange: number | BN | string,
      lowPriceRange: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      longShortPair: string,
      highPriceRange: number | BN | string,
      lowPriceRange: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      longShortPair: string,
      highPriceRange: number | BN | string,
      lowPriceRange: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      longShortPair: string,
      highPriceRange: number | BN | string,
      lowPriceRange: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
   * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
   */
  percentageLongCollateralAtExpiry(
    expiryPrice: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    longShortPairParameters(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * between highPriceRange and lowPriceRange the contract will payout a fixed amount of lowPriceRange*collateralPerPair (i.e the "notional" of the yield dollar).Note: a) Any address can set these parameters b) existing LSP parameters for address not set. c) highPriceRange > lowPriceRange. d) parameters price can only be set once to prevent the deployer from changing the parameters after the fact. e) For safety, a parameters should be set before depositing any synthetic tokens in a liquidity pool. f) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the parameters price for an associated financial product.
     * @param highPriceRange high price range after which the payout transforms from a yield dollar to a call option.
     * @param longShortPair address of the LSP contract.
     * @param lowPriceRange low price range below which the payout transforms from a yield dollar to a short put option.
     */
    setLongShortPairParameters: {
      (
        longShortPair: string,
        highPriceRange: number | BN | string,
        lowPriceRange: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        longShortPair: string,
        highPriceRange: number | BN | string,
        lowPriceRange: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        longShortPair: string,
        highPriceRange: number | BN | string,
        lowPriceRange: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        longShortPair: string,
        highPriceRange: number | BN | string,
        lowPriceRange: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    percentageLongCollateralAtExpiry(
      expiryPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

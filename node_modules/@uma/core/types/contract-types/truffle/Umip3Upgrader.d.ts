/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Umip3UpgraderContract
  extends Truffle.Contract<Umip3UpgraderInstance> {
  "new"(
    _existingGovernor: string,
    _existingVoting: string,
    _finder: string,
    _voting: string,
    _identifierWhitelist: string,
    _store: string,
    _financialContractsAdmin: string,
    _registry: string,
    _newGovernor: string,
    meta?: Truffle.TransactionDetails
  ): Promise<Umip3UpgraderInstance>;
}

type AllEvents = never;

export interface Umip3UpgraderInstance extends Truffle.ContractInstance {
  existingGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  existingVoting(txDetails?: Truffle.TransactionDetails): Promise<string>;

  financialContractsAdmin(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  identifierWhitelist(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  store(txDetails?: Truffle.TransactionDetails): Promise<string>;

  voting(txDetails?: Truffle.TransactionDetails): Promise<string>;

  upgrade: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    existingGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    existingVoting(txDetails?: Truffle.TransactionDetails): Promise<string>;

    financialContractsAdmin(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    identifierWhitelist(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    newGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

    store(txDetails?: Truffle.TransactionDetails): Promise<string>;

    voting(txDetails?: Truffle.TransactionDetails): Promise<string>;

    upgrade: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

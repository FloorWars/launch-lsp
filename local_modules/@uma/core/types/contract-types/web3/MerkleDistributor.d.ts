/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  caller: string;
  windowIndex: string;
  account: string;
  accountIndex: string;
  amount: string;
  rewardToken: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type CreatedWindow = ContractEventLog<{
  windowIndex: string;
  rewardsDeposited: string;
  rewardToken: string;
  owner: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DeleteWindow = ContractEventLog<{
  windowIndex: string;
  owner: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type WithdrawRewards = ContractEventLog<{
  owner: string;
  amount: string;
  currency: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MerkleDistributor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MerkleDistributor;
  clone(): MerkleDistributor;
  methods: {
    merkleWindows(
      arg0: number | string | BN
    ): NonPayableTransactionObject<{
      merkleRoot: string;
      rewardToken: string;
      ipfsHash: string;
      0: string;
      1: string;
      2: string;
    }>;

    nextCreatedIndex(): NonPayableTransactionObject<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    setWindow(
      rewardsToDeposit: number | string | BN,
      rewardToken: string,
      merkleRoot: string | number[],
      ipfsHash: string
    ): NonPayableTransactionObject<void>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    deleteWindow(
      windowIndex: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    withdrawRewards(
      rewardCurrency: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    claimMulti(
      claims: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        (string | number[])[]
      ][]
    ): NonPayableTransactionObject<void>;

    claim(
      _claim: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<void>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    isClaimed(
      windowIndex: number | string | BN,
      accountIndex: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    verifyClaim(
      _claim: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string,
        (string | number[])[]
      ]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    CreatedWindow(cb?: Callback<CreatedWindow>): EventEmitter;
    CreatedWindow(
      options?: EventOptions,
      cb?: Callback<CreatedWindow>
    ): EventEmitter;

    DeleteWindow(cb?: Callback<DeleteWindow>): EventEmitter;
    DeleteWindow(
      options?: EventOptions,
      cb?: Callback<DeleteWindow>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    WithdrawRewards(cb?: Callback<WithdrawRewards>): EventEmitter;
    WithdrawRewards(
      options?: EventOptions,
      cb?: Callback<WithdrawRewards>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "CreatedWindow", cb: Callback<CreatedWindow>): void;
  once(
    event: "CreatedWindow",
    options: EventOptions,
    cb: Callback<CreatedWindow>
  ): void;

  once(event: "DeleteWindow", cb: Callback<DeleteWindow>): void;
  once(
    event: "DeleteWindow",
    options: EventOptions,
    cb: Callback<DeleteWindow>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "WithdrawRewards", cb: Callback<WithdrawRewards>): void;
  once(
    event: "WithdrawRewards",
    options: EventOptions,
    cb: Callback<WithdrawRewards>
  ): void;
}

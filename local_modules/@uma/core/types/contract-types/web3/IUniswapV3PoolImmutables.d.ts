/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IUniswapV3PoolImmutables extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IUniswapV3PoolImmutables;
  clone(): IUniswapV3PoolImmutables;
  methods: {
    /**
     * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
     */
    factory(): NonPayableTransactionObject<string>;

    /**
     * The first of the two tokens of the pool, sorted by address
     */
    token0(): NonPayableTransactionObject<string>;

    /**
     * The second of the two tokens of the pool, sorted by address
     */
    token1(): NonPayableTransactionObject<string>;

    /**
     * The pool's fee in hundredths of a bip, i.e. 1e-6
     */
    fee(): NonPayableTransactionObject<string>;

    /**
     * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
     * The pool tick spacing
     */
    tickSpacing(): NonPayableTransactionObject<string>;

    /**
     * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
     * The maximum amount of position liquidity that can use any tick in the range
     */
    maxLiquidityPerTick(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

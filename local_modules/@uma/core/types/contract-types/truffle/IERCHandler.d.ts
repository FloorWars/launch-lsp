/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IERCHandlerContract
  extends Truffle.Contract<IERCHandlerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERCHandlerInstance>;
}

type AllEvents = never;

export interface IERCHandlerInstance extends Truffle.ContractInstance {
  /**
   * Correlates {resourceID} with {contractAddress}.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param resourceID ResourceID to be used when making deposits.
   */
  setResource: {
    (
      resourceID: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      resourceID: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      resourceID: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      resourceID: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Marks {contractAddress} as mintable/burnable.
   * @param contractAddress Address of contract to be used when making or executing deposits.
   */
  setBurnable: {
    (contractAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used to manually release funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
   * @param recipient Address to release tokens to.
   * @param tokenAddress Address of token contract to release.
   */
  withdraw: {
    (
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource: {
      (
        resourceID: string,
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        resourceID: string,
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        resourceID: string,
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        resourceID: string,
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    setBurnable: {
      (
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    withdraw: {
      (
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

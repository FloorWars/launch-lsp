/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UniswapV3BrokerContract
  extends Truffle.Contract<UniswapV3BrokerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UniswapV3BrokerInstance>;
}

type AllEvents = never;

export interface UniswapV3BrokerInstance extends Truffle.ContractInstance {
  /**
   * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
   * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
   * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
   * @param recipient address that the output tokens should be sent to.
   * @param sqrtRatioTargetX96 target, encoded price.
   * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
   * @param uniswapPool address of the pool to uniswap v3 trade against.
   * @param uniswapRouter address of the uniswap v3 router to route the trade.
   */
  swapToPrice: {
    (
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: number | BN | string,
      recipient: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: number | BN | string,
      recipient: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: number | BN | string,
      recipient: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: number | BN | string,
      recipient: string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    swapToPrice: {
      (
        tradingAsEOA: boolean,
        uniswapPool: string,
        uniswapRouter: string,
        sqrtRatioTargetX96: number | BN | string,
        recipient: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tradingAsEOA: boolean,
        uniswapPool: string,
        uniswapRouter: string,
        sqrtRatioTargetX96: number | BN | string,
        recipient: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tradingAsEOA: boolean,
        uniswapPool: string,
        uniswapRouter: string,
        sqrtRatioTargetX96: number | BN | string,
        recipient: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tradingAsEOA: boolean,
        uniswapPool: string,
        uniswapRouter: string,
        sqrtRatioTargetX96: number | BN | string,
        recipient: string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

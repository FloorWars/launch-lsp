/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StateSyncMockContract
  extends Truffle.Contract<StateSyncMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StateSyncMockInstance>;
}

export interface StateSynced {
  name: "StateSynced";
  args: {
    id: BN;
    contractAddress: string;
    data: string;
    0: BN;
    1: string;
    2: string;
  };
}

type AllEvents = StateSynced;

export interface StateSyncMockInstance extends Truffle.ContractInstance {
  /**
   * sender and receiver contracts need to be registered in case of actual state sender contract
   * called to send data to child chain
   * @param data bytes data to be sent
   * @param receiver the contract receiving data on child chain
   */
  syncState: {
    (
      receiver: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      receiver: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      receiver: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      receiver: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * sender and receiver contracts need to be registered in case of actual state sender contract
     * called to send data to child chain
     * @param data bytes data to be sent
     * @param receiver the contract receiving data on child chain
     */
    syncState: {
      (
        receiver: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        receiver: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        receiver: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        receiver: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

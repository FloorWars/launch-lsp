/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FinderInterfaceContract
  extends Truffle.Contract<FinderInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FinderInterfaceInstance>;
}

type AllEvents = never;

export interface FinderInterfaceInstance extends Truffle.ContractInstance {
  /**
   * Updates the address of the contract that implements `interfaceName`.
   * @param implementationAddress address of the deployed contract that implements the interface.
   * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.
   */
  changeImplementationAddress: {
    (
      interfaceName: string,
      implementationAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      interfaceName: string,
      implementationAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      interfaceName: string,
      implementationAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      interfaceName: string,
      implementationAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Gets the address of the contract that implements the given `interfaceName`.
   * @param interfaceName queried interface.
   */
  getImplementationAddress(
    interfaceName: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    /**
     * Updates the address of the contract that implements `interfaceName`.
     * @param implementationAddress address of the deployed contract that implements the interface.
     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.
     */
    changeImplementationAddress: {
      (
        interfaceName: string,
        implementationAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        interfaceName: string,
        implementationAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        interfaceName: string,
        implementationAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        interfaceName: string,
        implementationAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Gets the address of the contract that implements the given `interfaceName`.
     * @param interfaceName queried interface.
     */
    getImplementationAddress(
      interfaceName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

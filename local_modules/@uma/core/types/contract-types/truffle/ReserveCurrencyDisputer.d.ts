/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ReserveCurrencyDisputerContract
  extends Truffle.Contract<ReserveCurrencyDisputerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ReserveCurrencyDisputerInstance>;
}

type AllEvents = never;

export interface ReserveCurrencyDisputerInstance
  extends Truffle.ContractInstance {
  /**
   * Any collateral the contract has will be used before anything is purchased on Uniswap.
   * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
   * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
   * @param financialContract address of the financial contract on which the liquidation is occurring.
   * @param liquidationId index of the liquidation for the given sponsor.
   * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
   * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
   * @param sponsor address of the sponsor who's liquidation is disputed.
   * @param uniswapRouter address of the uniswap router used to facilitate trades.
   */
  swapDispute: {
    (
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: number | BN | string,
      sponsor: string,
      maxReserveTokenSpent: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: number | BN | string,
      sponsor: string,
      maxReserveTokenSpent: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: number | BN | string,
      sponsor: string,
      maxReserveTokenSpent: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: number | BN | string,
      sponsor: string,
      maxReserveTokenSpent: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    swapDispute: {
      (
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidationId: number | BN | string,
        sponsor: string,
        maxReserveTokenSpent: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidationId: number | BN | string,
        sponsor: string,
        maxReserveTokenSpent: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidationId: number | BN | string,
        sponsor: string,
        maxReserveTokenSpent: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidationId: number | BN | string,
        sponsor: string,
        maxReserveTokenSpent: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

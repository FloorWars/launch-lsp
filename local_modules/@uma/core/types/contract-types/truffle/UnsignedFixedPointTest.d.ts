/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UnsignedFixedPointTestContract
  extends Truffle.Contract<UnsignedFixedPointTestInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<UnsignedFixedPointTestInstance>;
}

type AllEvents = never;

export interface UnsignedFixedPointTestInstance
  extends Truffle.ContractInstance {
  wrapFromUnscaledUint(
    a: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapIsEqual(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsEqual(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapIsGreaterThan(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapIsGreaterThanOrEqual(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsGreaterThan(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsGreaterThanOrEqual(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsGreaterThanOpposite(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsGreaterThanOrEqualOpposite(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapIsLessThan(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapIsLessThanOrEqual(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsLessThan(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsLessThanOrEqual(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsLessThanOpposite(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMixedIsLessThanOrEqualOpposite(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  wrapMin(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMax(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapAdd(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedAdd(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapSub(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedSub(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedSubOpposite(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMul(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMulCeil(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedMul(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedMulCeil(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapDiv(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapDivCeil(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedDiv(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedDivCeil(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapMixedDivOpposite(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  wrapPow(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    wrapFromUnscaledUint(
      a: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapIsEqual(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsEqual(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapIsGreaterThan(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapIsGreaterThanOrEqual(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsGreaterThan(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsGreaterThanOrEqual(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsGreaterThanOpposite(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsGreaterThanOrEqualOpposite(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapIsLessThan(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapIsLessThanOrEqual(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsLessThan(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsLessThanOrEqual(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsLessThanOpposite(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMixedIsLessThanOrEqualOpposite(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    wrapMin(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMax(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapAdd(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedAdd(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapSub(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedSub(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedSubOpposite(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMul(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMulCeil(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedMul(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedMulCeil(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapDiv(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapDivCeil(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedDiv(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedDivCeil(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapMixedDivOpposite(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    wrapPow(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

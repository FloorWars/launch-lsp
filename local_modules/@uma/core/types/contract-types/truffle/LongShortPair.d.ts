/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LongShortPairContract
  extends Truffle.Contract<LongShortPairInstance> {
  "new"(
    params: {
      pairName: string;
      expirationTimestamp: number | BN | string;
      collateralPerPair: number | BN | string;
      priceIdentifier: string;
      longToken: string;
      shortToken: string;
      collateralToken: string;
      financialProductLibrary: string;
      customAncillaryData: string;
      prepaidProposerReward: number | BN | string;
      optimisticOracleLivenessTime: number | BN | string;
      optimisticOracleProposerBond: number | BN | string;
      finder: string;
      timerAddress: string;
    },
    meta?: Truffle.TransactionDetails
  ): Promise<LongShortPairInstance>;
}

export interface ContractExpired {
  name: "ContractExpired";
  args: {
    caller: string;
    0: string;
  };
}

export interface PositionSettled {
  name: "PositionSettled";
  args: {
    sponsor: string;
    collateralReturned: BN;
    longTokens: BN;
    shortTokens: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface TokensCreated {
  name: "TokensCreated";
  args: {
    sponsor: string;
    collateralUsed: BN;
    tokensMinted: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface TokensRedeemed {
  name: "TokensRedeemed";
  args: {
    sponsor: string;
    collateralReturned: BN;
    tokensRedeemed: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents =
  | ContractExpired
  | PositionSettled
  | TokensCreated
  | TokensRedeemed;

export interface LongShortPairInstance extends Truffle.ContractInstance {
  collateralPerPair(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collateralToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  contractState(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  customAncillaryData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  expirationTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  expiryPercentLong(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  expiryPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  financialProductLibrary(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  longToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  optimisticOracleLivenessTime(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  optimisticOracleProposerBond(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  pairName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  prepaidProposerReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  priceIdentifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime: {
    (
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  shortToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  timerAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
   * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
   * @param tokensToCreate number of long and short synthetic tokens to create.
   */
  create: {
    (
      tokensToCreate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokensToCreate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokensToCreate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokensToCreate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
   * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
   * @param tokensToRedeem number of long and short synthetic tokens to redeem.
   */
  redeem: {
    (
      tokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      tokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
   * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
   * @param longTokensToRedeem number of long tokens to settle.
   * @param shortTokensToRedeem number of short tokens to settle.
   */
  settle: {
    (
      longTokensToRedeem: number | BN | string,
      shortTokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      longTokensToRedeem: number | BN | string,
      shortTokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      longTokensToRedeem: number | BN | string,
      shortTokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      longTokensToRedeem: number | BN | string,
      shortTokensToRedeem: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  expire: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Returns the number of long and short tokens a sponsor wallet holds.
   * @param sponsor address of the sponsor to query.
   */
  getPositionTokens(
    sponsor: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  methods: {
    collateralPerPair(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collateralToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    contractState(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    customAncillaryData(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    expirationTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    expiryPercentLong(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    expiryPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    financialProductLibrary(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    longToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    optimisticOracleLivenessTime(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    optimisticOracleProposerBond(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    pairName(txDetails?: Truffle.TransactionDetails): Promise<string>;

    prepaidProposerReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    priceIdentifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime: {
      (
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    shortToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    timerAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    create: {
      (
        tokensToCreate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokensToCreate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tokensToCreate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokensToCreate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    redeem: {
      (
        tokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        tokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    settle: {
      (
        longTokensToRedeem: number | BN | string,
        shortTokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        longTokensToRedeem: number | BN | string,
        shortTokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        longTokensToRedeem: number | BN | string,
        shortTokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        longTokensToRedeem: number | BN | string,
        shortTokensToRedeem: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    expire: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    getPositionTokens(
      sponsor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

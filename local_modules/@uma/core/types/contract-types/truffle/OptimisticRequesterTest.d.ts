/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OptimisticRequesterTestContract
  extends Truffle.Contract<OptimisticRequesterTestInstance> {
  "new"(
    _optimisticOracle: string,
    meta?: Truffle.TransactionDetails
  ): Promise<OptimisticRequesterTestInstance>;
}

type AllEvents = never;

export interface OptimisticRequesterTestInstance
  extends Truffle.ContractInstance {
  ancillaryData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  collateralCurrency(txDetails?: Truffle.TransactionDetails): Promise<string>;

  expirationTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  identifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

  price(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  refund(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  shouldRevert(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  timestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  requestPrice: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      currency: string,
      reward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      currency: string,
      reward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      currency: string,
      reward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      currency: string,
      reward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  settleAndGetPrice: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBond: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      bond: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      bond: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      bond: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      bond: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRefundOnDispute: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCustomLiveness: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      customLiveness: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      customLiveness: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      customLiveness: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      customLiveness: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setRevert: {
    (_shouldRevert: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _shouldRevert: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _shouldRevert: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _shouldRevert: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setExpirationTimestamp: {
    (
      _expirationTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _expirationTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _expirationTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _expirationTimestamp: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  clearState: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  priceProposed: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  priceDisputed: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  priceSettled: {
    (
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _identifier: string,
      _timestamp: number | BN | string,
      _ancillaryData: string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    ancillaryData(txDetails?: Truffle.TransactionDetails): Promise<string>;

    collateralCurrency(txDetails?: Truffle.TransactionDetails): Promise<string>;

    expirationTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    identifier(txDetails?: Truffle.TransactionDetails): Promise<string>;

    price(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    refund(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    shouldRevert(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    timestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    requestPrice: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        currency: string,
        reward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        currency: string,
        reward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        currency: string,
        reward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        currency: string,
        reward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    settleAndGetPrice: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBond: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        bond: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        bond: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        bond: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        bond: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRefundOnDispute: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCustomLiveness: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        customLiveness: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        customLiveness: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        customLiveness: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        customLiveness: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setRevert: {
      (_shouldRevert: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _shouldRevert: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _shouldRevert: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _shouldRevert: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setExpirationTimestamp: {
      (
        _expirationTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _expirationTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _expirationTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _expirationTimestamp: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    clearState: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    priceProposed: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    priceDisputed: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    priceSettled: {
      (
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _identifier: string,
        _timestamp: number | BN | string,
        _ancillaryData: string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

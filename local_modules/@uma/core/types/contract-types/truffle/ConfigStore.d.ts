/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ConfigStoreContract
  extends Truffle.Contract<ConfigStoreInstance> {
  "new"(
    _initialConfig: {
      timelockLiveness: number | BN | string;
      rewardRatePerSecond: { rawValue: number | BN | string };
      proposerBondPercentage: { rawValue: number | BN | string };
      maxFundingRate: { rawValue: number | BN | string };
      minFundingRate: { rawValue: number | BN | string };
      proposalTimePastLimit: number | BN | string;
    },
    _timerAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ConfigStoreInstance>;
}

export interface ChangedConfigSettings {
  name: "ChangedConfigSettings";
  args: {
    rewardRatePerSecond: BN;
    proposerBondPercentage: BN;
    timelockLiveness: BN;
    maxFundingRate: BN;
    minFundingRate: BN;
    proposalTimePastLimit: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProposedNewConfigSettings {
  name: "ProposedNewConfigSettings";
  args: {
    proposer: string;
    rewardRatePerSecond: BN;
    proposerBondPercentage: BN;
    timelockLiveness: BN;
    maxFundingRate: BN;
    minFundingRate: BN;
    proposalTimePastLimit: BN;
    proposalPassedTimestamp: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
  };
}

type AllEvents =
  | ChangedConfigSettings
  | OwnershipTransferred
  | ProposedNewConfigSettings;

export interface ConfigStoreInstance extends Truffle.ContractInstance {
  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pendingConfig(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: { rawValue: BN };
    2: { rawValue: BN };
    3: { rawValue: BN };
    4: { rawValue: BN };
    5: BN;
  }>;

  pendingPassedTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime: {
    (
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  timerAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns current config or pending config if pending liveness has expired.
   */
  updateAndGetCurrentConfig: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      timelockLiveness: BN;
      rewardRatePerSecond: { rawValue: BN };
      proposerBondPercentage: { rawValue: BN };
      maxFundingRate: { rawValue: BN };
      minFundingRate: { rawValue: BN };
      proposalTimePastLimit: BN;
    }>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  proposeNewConfig: {
    (
      newConfig: {
        timelockLiveness: number | BN | string;
        rewardRatePerSecond: { rawValue: number | BN | string };
        proposerBondPercentage: { rawValue: number | BN | string };
        maxFundingRate: { rawValue: number | BN | string };
        minFundingRate: { rawValue: number | BN | string };
        proposalTimePastLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newConfig: {
        timelockLiveness: number | BN | string;
        rewardRatePerSecond: { rawValue: number | BN | string };
        proposerBondPercentage: { rawValue: number | BN | string };
        maxFundingRate: { rawValue: number | BN | string };
        minFundingRate: { rawValue: number | BN | string };
        proposalTimePastLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newConfig: {
        timelockLiveness: number | BN | string;
        rewardRatePerSecond: { rawValue: number | BN | string };
        proposerBondPercentage: { rawValue: number | BN | string };
        maxFundingRate: { rawValue: number | BN | string };
        minFundingRate: { rawValue: number | BN | string };
        proposalTimePastLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newConfig: {
        timelockLiveness: number | BN | string;
        rewardRatePerSecond: { rawValue: number | BN | string };
        proposerBondPercentage: { rawValue: number | BN | string };
        maxFundingRate: { rawValue: number | BN | string };
        minFundingRate: { rawValue: number | BN | string };
        proposalTimePastLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
   */
  publishPendingConfig: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pendingConfig(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: { rawValue: BN };
      2: { rawValue: BN };
      3: { rawValue: BN };
      4: { rawValue: BN };
      5: BN;
    }>;

    pendingPassedTimestamp(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime: {
      (
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    timerAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    updateAndGetCurrentConfig: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        timelockLiveness: BN;
        rewardRatePerSecond: { rawValue: BN };
        proposerBondPercentage: { rawValue: BN };
        maxFundingRate: { rawValue: BN };
        minFundingRate: { rawValue: BN };
        proposalTimePastLimit: BN;
      }>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    proposeNewConfig: {
      (
        newConfig: {
          timelockLiveness: number | BN | string;
          rewardRatePerSecond: { rawValue: number | BN | string };
          proposerBondPercentage: { rawValue: number | BN | string };
          maxFundingRate: { rawValue: number | BN | string };
          minFundingRate: { rawValue: number | BN | string };
          proposalTimePastLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newConfig: {
          timelockLiveness: number | BN | string;
          rewardRatePerSecond: { rawValue: number | BN | string };
          proposerBondPercentage: { rawValue: number | BN | string };
          maxFundingRate: { rawValue: number | BN | string };
          minFundingRate: { rawValue: number | BN | string };
          proposalTimePastLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newConfig: {
          timelockLiveness: number | BN | string;
          rewardRatePerSecond: { rawValue: number | BN | string };
          proposerBondPercentage: { rawValue: number | BN | string };
          maxFundingRate: { rawValue: number | BN | string };
          minFundingRate: { rawValue: number | BN | string };
          proposalTimePastLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newConfig: {
          timelockLiveness: number | BN | string;
          rewardRatePerSecond: { rawValue: number | BN | string };
          proposerBondPercentage: { rawValue: number | BN | string };
          maxFundingRate: { rawValue: number | BN | string };
          minFundingRate: { rawValue: number | BN | string };
          proposalTimePastLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    publishPendingConfig: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

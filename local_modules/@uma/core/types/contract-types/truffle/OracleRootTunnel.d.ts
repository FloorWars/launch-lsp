/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OracleRootTunnelContract
  extends Truffle.Contract<OracleRootTunnelInstance> {
  "new"(
    _checkpointManager: string,
    _fxRoot: string,
    _finderAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<OracleRootTunnelInstance>;
}

export interface PriceRequestAdded {
  name: "PriceRequestAdded";
  args: {
    identifier: string;
    time: BN;
    ancillaryData: string;
    requestHash: string;
    0: string;
    1: BN;
    2: string;
    3: string;
  };
}

export interface PushedPrice {
  name: "PushedPrice";
  args: {
    identifier: string;
    time: BN;
    ancillaryData: string;
    price: BN;
    requestHash: string;
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: string;
  };
}

type AllEvents = PriceRequestAdded | PushedPrice;

export interface OracleRootTunnelInstance extends Truffle.ContractInstance {
  SEND_MESSAGE_EVENT_SIG(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  ancillaryBytesLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  checkpointManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  fxChildTunnel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  fxRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

  processedExits(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * This function verifies if the transaction actually happened on child chain
   * receive message from  L2 to L1, validated by proof
   * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
   */
  receiveMessage: {
    (inputData: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      inputData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      inputData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      inputData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFxChildTunnel: {
    (_fxChildTunnel: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _fxChildTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fxChildTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fxChildTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must be registered with the DVM to query price requests.
   * This is the first method that should be called in order to publish a price request to the sidechain.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param time Timestamp of price request to resolve.
   */
  publishPrice: {
    (
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    SEND_MESSAGE_EVENT_SIG(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    ancillaryBytesLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    checkpointManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    fxChildTunnel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    fxRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

    processedExits(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * This function verifies if the transaction actually happened on child chain
     * receive message from  L2 to L1, validated by proof
     * @param inputData RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt
     */
    receiveMessage: {
      (inputData: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        inputData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        inputData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        inputData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFxChildTunnel: {
      (_fxChildTunnel: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _fxChildTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fxChildTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fxChildTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must be registered with the DVM to query price requests.
     * This is the first method that should be called in order to publish a price request to the sidechain.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice: {
      (
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

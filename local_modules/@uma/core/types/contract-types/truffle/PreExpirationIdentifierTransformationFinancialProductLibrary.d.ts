/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PreExpirationIdentifierTransformationFinancialProductLibraryContract
  extends Truffle.Contract<PreExpirationIdentifierTransformationFinancialProductLibraryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<PreExpirationIdentifierTransformationFinancialProductLibraryInstance>;
}

type AllEvents = never;

export interface PreExpirationIdentifierTransformationFinancialProductLibraryInstance
  extends Truffle.ContractInstance {
  transformCollateralRequirement(
    oraclePrice: { rawValue: number | BN | string },
    collateralRequirement: { rawValue: number | BN | string },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ rawValue: BN }>;

  transformPrice(
    oraclePrice: { rawValue: number | BN | string },
    requestTime: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ rawValue: BN }>;

  /**
   * Note: a) Any address can set identifier transformations b) The identifier can't be set to blank. c) A transformed price can only be set once to prevent the deployer from changing it after the fact. d) financialProduct must expose an expirationTimestamp method.
   * Enables the deployer of the library to set the transformed identifier for an associated financial product.
   * @param financialProduct address of the financial product.
   * @param transformedIdentifier the identifier for the financial product to be used if the contract is pre expiration.
   */
  setFinancialProductTransformedIdentifier: {
    (
      financialProduct: string,
      transformedIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      financialProduct: string,
      transformedIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      financialProduct: string,
      transformedIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      financialProduct: string,
      transformedIdentifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the transformed identifier associated with a given financial product address.
   * @param financialProduct address of the financial product.
   */
  getTransformedIdentifierForFinancialProduct(
    financialProduct: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns a transformed price identifier if the contract is pre-expiration and no transformation if post.
   * @param identifier input price identifier to be transformed.
   * @param requestTime timestamp the identifier is to be used at.
   */
  transformPriceIdentifier(
    identifier: string,
    requestTime: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    transformCollateralRequirement(
      oraclePrice: { rawValue: number | BN | string },
      collateralRequirement: { rawValue: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ rawValue: BN }>;

    transformPrice(
      oraclePrice: { rawValue: number | BN | string },
      requestTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ rawValue: BN }>;

    /**
     * Note: a) Any address can set identifier transformations b) The identifier can't be set to blank. c) A transformed price can only be set once to prevent the deployer from changing it after the fact. d) financialProduct must expose an expirationTimestamp method.
     * Enables the deployer of the library to set the transformed identifier for an associated financial product.
     * @param financialProduct address of the financial product.
     * @param transformedIdentifier the identifier for the financial product to be used if the contract is pre expiration.
     */
    setFinancialProductTransformedIdentifier: {
      (
        financialProduct: string,
        transformedIdentifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        financialProduct: string,
        transformedIdentifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        financialProduct: string,
        transformedIdentifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        financialProduct: string,
        transformedIdentifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the transformed identifier associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    getTransformedIdentifierForFinancialProduct(
      financialProduct: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns a transformed price identifier if the contract is pre-expiration and no transformation if post.
     * @param identifier input price identifier to be transformed.
     * @param requestTime timestamp the identifier is to be used at.
     */
    transformPriceIdentifier(
      identifier: string,
      requestTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

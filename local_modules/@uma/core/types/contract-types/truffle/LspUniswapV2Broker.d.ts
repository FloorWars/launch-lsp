/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LspUniswapV2BrokerContract
  extends Truffle.Contract<LspUniswapV2BrokerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LspUniswapV2BrokerInstance>;
}

type AllEvents = never;

export interface LspUniswapV2BrokerInstance extends Truffle.ContractInstance {
  /**
   * The caller of this method needs to approve `amountCollateral` collateral to be spent by this contract.
   * Mint long and short tokens and deposit them all into a UniV2 Pool.
   * @param amountCollateral Amount of collateral to deposit and mint long and short tokens against.
   * @param callingAsEOA If True, caller has balance of collateral and expects to receive back all LP  tokens + dust.
   * @param deadline Unix timestamp that will force the transaction to revert if minded after this time.
   * @param longShortPair LSP contract address to mint position on.
   * @param minLpTokens Minimum number of LP tokens to mint
   * @param router Contract to call to exchange long and short tokens.
   */
  atomicMintAddLiquidity: {
    (
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      minLpTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      minLpTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      minLpTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      callingAsEOA: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      minLpTokens: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * The caller of this method needs to approve `amountCollateral` collateral to be spent by this contract.
   * Mint long and short tokens and convert all of one side into the other.
   * @param amountCollateral Amount of collateral to deposit and mint long and short tokens against.
   * @param callingAsEOA If True, caller has balance of collateral and expects to receive back all long/short tokens.
   * @param deadline `Router.swapExactTokensForTokens` param: time before transaction must be mined.
   * @param longShortPair LSP contract address to mint position on.
   * @param router Contract to call to exchange long and short tokens.
   * @param sellLong If True, converts all long tokens into short, else the opposite.
   * @param swapPath `Router.swapExactTokensForTokens` param: path with which to swap token to sell for the other.
   */
  atomicMintSellOneSide: {
    (
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      swapPath: string[],
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      swapPath: string[],
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      swapPath: string[],
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      callingAsEOA: boolean,
      sellLong: boolean,
      longShortPair: string,
      router: string,
      amountCollateral: number | BN | string,
      swapPath: string[],
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getReserves(
    factory: string,
    tokenA: string,
    tokenB: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  methods: {
    /**
     * The caller of this method needs to approve `amountCollateral` collateral to be spent by this contract.
     * Mint long and short tokens and deposit them all into a UniV2 Pool.
     * @param amountCollateral Amount of collateral to deposit and mint long and short tokens against.
     * @param callingAsEOA If True, caller has balance of collateral and expects to receive back all LP  tokens + dust.
     * @param deadline Unix timestamp that will force the transaction to revert if minded after this time.
     * @param longShortPair LSP contract address to mint position on.
     * @param minLpTokens Minimum number of LP tokens to mint
     * @param router Contract to call to exchange long and short tokens.
     */
    atomicMintAddLiquidity: {
      (
        callingAsEOA: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        minLpTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callingAsEOA: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        minLpTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callingAsEOA: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        minLpTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callingAsEOA: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        minLpTokens: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * The caller of this method needs to approve `amountCollateral` collateral to be spent by this contract.
     * Mint long and short tokens and convert all of one side into the other.
     * @param amountCollateral Amount of collateral to deposit and mint long and short tokens against.
     * @param callingAsEOA If True, caller has balance of collateral and expects to receive back all long/short tokens.
     * @param deadline `Router.swapExactTokensForTokens` param: time before transaction must be mined.
     * @param longShortPair LSP contract address to mint position on.
     * @param router Contract to call to exchange long and short tokens.
     * @param sellLong If True, converts all long tokens into short, else the opposite.
     * @param swapPath `Router.swapExactTokensForTokens` param: path with which to swap token to sell for the other.
     */
    atomicMintSellOneSide: {
      (
        callingAsEOA: boolean,
        sellLong: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        swapPath: string[],
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        callingAsEOA: boolean,
        sellLong: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        swapPath: string[],
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        callingAsEOA: boolean,
        sellLong: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        swapPath: string[],
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        callingAsEOA: boolean,
        sellLong: boolean,
        longShortPair: string,
        router: string,
        amountCollateral: number | BN | string,
        swapPath: string[],
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getReserves(
      factory: string,
      tokenA: string,
      tokenB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

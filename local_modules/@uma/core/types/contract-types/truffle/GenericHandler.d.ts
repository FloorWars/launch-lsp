/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GenericHandlerContract
  extends Truffle.Contract<GenericHandlerInstance> {
  "new"(
    bridgeAddress: string,
    initialResourceIDs: string[],
    initialContractAddresses: string[],
    initialDepositFunctionSignatures: string[],
    initialExecuteFunctionSignatures: string[],
    meta?: Truffle.TransactionDetails
  ): Promise<GenericHandlerInstance>;
}

type AllEvents = never;

export interface GenericHandlerInstance extends Truffle.ContractInstance {
  _bridgeAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _contractAddressToDepositFunctionSignature(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _contractAddressToExecuteFunctionSignature(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _contractAddressToResourceID(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _contractWhitelist(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _depositRecords(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string; 2: string; 3: string }>;

  _resourceIDToContractAddress(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * @param depositNonce This ID will have been generated by the Bridge contract.
   * @param destId ID of chain deposit will be bridged to.
   */
  getDepositRecord(
    depositNonce: number | BN | string,
    destId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    _destinationChainID: BN;
    _depositer: string;
    _resourceID: string;
    _metaData: string;
  }>;

  /**
   * First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, {_contractAddressToDepositFunctionSignature} with {depositFunctionSig}, {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig}, and {_contractWhitelist} to true for {contractAddress}.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.
   * @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.
   * @param resourceID ResourceID to be used when making deposits.
   */
  setResource: {
    (
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  64 - END{contractAddress} is required to be whitelistedIf {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments.
   * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
   * @param depositNonce This value is generated as an ID by the Bridge contract.
   * @param depositer Address of account making the deposit in the Bridge contract.
   * @param destinationChainID Chain ID deposit is expected to be bridged to.
   */
  deposit: {
    (
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments.
   * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
   */
  executeProposal: {
    (
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _bridgeAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    _contractAddressToDepositFunctionSignature(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _contractAddressToExecuteFunctionSignature(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _contractAddressToResourceID(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _contractWhitelist(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    _depositRecords(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string; 2: string; 3: string }>;

    _resourceIDToContractAddress(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * @param depositNonce This ID will have been generated by the Bridge contract.
     * @param destId ID of chain deposit will be bridged to.
     */
    getDepositRecord(
      depositNonce: number | BN | string,
      destId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      _destinationChainID: BN;
      _depositer: string;
      _resourceID: string;
      _metaData: string;
    }>;

    /**
     * First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, {_contractAddressToDepositFunctionSignature} with {depositFunctionSig}, {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig}, and {_contractWhitelist} to true for {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.
     * @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource: {
      (
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  64 - END{contractAddress} is required to be whitelistedIf {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments.
     * @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.
     * @param depositNonce This value is generated as an ID by the Bridge contract.
     * @param depositer Address of account making the deposit in the Bridge contract.
     * @param destinationChainID Chain ID deposit is expected to be bridged to.
     */
    deposit: {
      (
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments.
     * @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.
     */
    executeProposal: {
      (
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

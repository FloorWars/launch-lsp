/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RegistryInterfaceContract
  extends Truffle.Contract<RegistryInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<RegistryInterfaceInstance>;
}

type AllEvents = never;

export interface RegistryInterfaceInstance extends Truffle.ContractInstance {
  /**
   * Only authorized contract creators can call this method.
   * Registers a new contract.
   * @param contractAddress defines the address of the deployed contract.
   * @param parties an array of addresses who become parties in the contract.
   */
  registerContract: {
    (
      parties: string[],
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      parties: string[],
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      parties: string[],
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      parties: string[],
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * If it is registered, it is an authorized participant in the UMA system.
   * Returns whether the contract has been registered with the registry.
   * @param contractAddress address of the contract.
   */
  isContractRegistered(
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns a list of all contracts that are associated with a particular party.
   * @param party address of the party.
   */
  getRegisteredContracts(
    party: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * Returns all registered contracts.
   */
  getAllRegisteredContracts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  /**
   * msg.sender must be the contract to which the party member is added.
   * Adds a party to the calling contract.
   * @param party address to be added to the contract.
   */
  addPartyToContract: {
    (party: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(party: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      party: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      party: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * msg.sender must be the contract to which the party member is added.
   * Removes a party member to the calling contract.
   * @param party address to be removed from the contract.
   */
  removePartyFromContract: {
    (party: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(party: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      party: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      party: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * checks if an address is a party in a contract.
   * @param contractAddress address to check against the party.
   * @param party party to check.
   */
  isPartyMemberOfContract(
    party: string,
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    registerContract: {
      (
        parties: string[],
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        parties: string[],
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        parties: string[],
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        parties: string[],
        contractAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    isContractRegistered(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    addPartyToContract: {
      (party: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        party: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        party: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        party: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    removePartyFromContract: {
      (party: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        party: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        party: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        party: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

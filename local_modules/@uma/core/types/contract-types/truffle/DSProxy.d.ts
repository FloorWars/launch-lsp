/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DSProxyContract extends Truffle.Contract<DSProxyInstance> {
  "new"(
    _cacheAddr: string,
    meta?: Truffle.TransactionDetails
  ): Promise<DSProxyInstance>;
}

export interface LogNote {
  name: "LogNote";
  args: {
    sig: string;
    guy: string;
    foo: string;
    bar: string;
    fax: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
  };
}

export interface LogSetAuthority {
  name: "LogSetAuthority";
  args: {
    authority: string;
    0: string;
  };
}

export interface LogSetOwner {
  name: "LogSetOwner";
  args: {
    owner: string;
    0: string;
  };
}

type AllEvents = LogSetAuthority | LogSetOwner;

export interface DSProxyInstance extends Truffle.ContractInstance {
  authority(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cache(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setAuthority: {
    (authority_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      authority_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      authority_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      authority_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setOwner: {
    (owner_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(owner_: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      owner_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCache: {
    (_cacheAddr: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _cacheAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _cacheAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _cacheAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    authority(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cache(txDetails?: Truffle.TransactionDetails): Promise<string>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setAuthority: {
      (authority_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        authority_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        authority_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        authority_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setOwner: {
      (owner_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        owner_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        owner_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCache: {
      (_cacheAddr: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _cacheAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _cacheAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _cacheAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "execute(address,bytes)": {
      (
        _target: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _target: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _target: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _target: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "execute(bytes,bytes)": {
      (
        _code: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _code: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string; 1: string }>;
      sendTransaction(
        _code: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _code: string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

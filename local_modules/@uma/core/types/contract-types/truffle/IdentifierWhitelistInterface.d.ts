/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IdentifierWhitelistInterfaceContract
  extends Truffle.Contract<IdentifierWhitelistInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IdentifierWhitelistInterfaceInstance>;
}

type AllEvents = never;

export interface IdentifierWhitelistInterfaceInstance
  extends Truffle.ContractInstance {
  /**
   * Price requests using this identifier will succeed after this call.
   * Adds the provided identifier as a supported identifier.
   * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.
   */
  addSupportedIdentifier: {
    (identifier: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Price requests using this identifier will no longer succeed after this call.
   * Removes the identifier from the whitelist.
   * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.
   */
  removeSupportedIdentifier: {
    (identifier: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Checks whether an identifier is on the whitelist.
   * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.
   */
  isIdentifierSupported(
    identifier: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    /**
     * Price requests using this identifier will succeed after this call.
     * Adds the provided identifier as a supported identifier.
     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.
     */
    addSupportedIdentifier: {
      (identifier: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        identifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Price requests using this identifier will no longer succeed after this call.
     * Removes the identifier from the whitelist.
     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.
     */
    removeSupportedIdentifier: {
      (identifier: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        identifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Checks whether an identifier is on the whitelist.
     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.
     */
    isIdentifierSupported(
      identifier: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OracleInterfacesContract
  extends Truffle.Contract<OracleInterfacesInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OracleInterfacesInstance>;
}

type AllEvents = never;

export interface OracleInterfacesInstance extends Truffle.ContractInstance {
  Bridge(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CollateralWhitelist(txDetails?: Truffle.TransactionDetails): Promise<string>;

  FinancialContractsAdmin(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  GenericHandler(txDetails?: Truffle.TransactionDetails): Promise<string>;

  IdentifierWhitelist(txDetails?: Truffle.TransactionDetails): Promise<string>;

  OptimisticOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  Registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  Store(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    Bridge(txDetails?: Truffle.TransactionDetails): Promise<string>;

    CollateralWhitelist(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    FinancialContractsAdmin(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    GenericHandler(txDetails?: Truffle.TransactionDetails): Promise<string>;

    IdentifierWhitelist(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    OptimisticOracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    Registry(txDetails?: Truffle.TransactionDetails): Promise<string>;

    Store(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

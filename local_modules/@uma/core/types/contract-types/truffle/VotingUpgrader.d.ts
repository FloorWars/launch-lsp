/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface VotingUpgraderContract
  extends Truffle.Contract<VotingUpgraderInstance> {
  "new"(
    _governor: string,
    _existingVoting: string,
    _newVoting: string,
    _finder: string,
    _setMigratedAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<VotingUpgraderInstance>;
}

type AllEvents = never;

export interface VotingUpgraderInstance extends Truffle.ContractInstance {
  existingVoting(txDetails?: Truffle.TransactionDetails): Promise<string>;

  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newVoting(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setMigratedAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * This method updates the Voting address in the finder, sets the old voting contract to migrated state, and returns ownership of the existing Voting contract and Finder back to the Governor.
   * Performs the atomic portion of the upgrade process.
   */
  upgrade: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    existingVoting(txDetails?: Truffle.TransactionDetails): Promise<string>;

    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    newVoting(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setMigratedAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * This method updates the Voting address in the finder, sets the old voting contract to migrated state, and returns ownership of the existing Voting contract and Finder back to the Governor.
     * Performs the atomic portion of the upgrade process.
     */
    upgrade: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

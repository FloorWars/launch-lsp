/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ConfigStoreInterfaceContract
  extends Truffle.Contract<ConfigStoreInterfaceInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ConfigStoreInterfaceInstance>;
}

type AllEvents = never;

export interface ConfigStoreInterfaceInstance extends Truffle.ContractInstance {
  updateAndGetCurrentConfig: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      timelockLiveness: BN;
      rewardRatePerSecond: { rawValue: BN };
      proposerBondPercentage: { rawValue: BN };
      maxFundingRate: { rawValue: BN };
      minFundingRate: { rawValue: BN };
      proposalTimePastLimit: BN;
    }>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    updateAndGetCurrentConfig: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        timelockLiveness: BN;
        rewardRatePerSecond: { rawValue: BN };
        proposerBondPercentage: { rawValue: BN };
        maxFundingRate: { rawValue: BN };
        minFundingRate: { rawValue: BN };
        proposalTimePastLimit: BN;
      }>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

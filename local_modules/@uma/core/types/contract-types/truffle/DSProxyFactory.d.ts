/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DSProxyFactoryContract
  extends Truffle.Contract<DSProxyFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DSProxyFactoryInstance>;
}

export interface Created {
  name: "Created";
  args: {
    sender: string;
    owner: string;
    proxy: string;
    cache: string;
    0: string;
    1: string;
    2: string;
    3: string;
  };
}

type AllEvents = Created;

export interface DSProxyFactoryInstance extends Truffle.ContractInstance {
  cache(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isProxy(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    cache(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isProxy(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    "build()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "build(address)": {
      (owner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

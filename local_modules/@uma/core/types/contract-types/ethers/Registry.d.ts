/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RegistryInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,address)": FunctionFragment;
    "contractMap(address)": FunctionFragment;
    "getMember(uint256)": FunctionFragment;
    "holdsRole(uint256,address)": FunctionFragment;
    "registeredContracts(uint256)": FunctionFragment;
    "removeMember(uint256,address)": FunctionFragment;
    "renounceMembership(uint256)": FunctionFragment;
    "resetMember(uint256,address)": FunctionFragment;
    "registerContract(address[],address)": FunctionFragment;
    "addPartyToContract(address)": FunctionFragment;
    "removePartyFromContract(address)": FunctionFragment;
    "isContractRegistered(address)": FunctionFragment;
    "getRegisteredContracts(address)": FunctionFragment;
    "getAllRegisteredContracts()": FunctionFragment;
    "isPartyMemberOfContract(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "contractMap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMember",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMembership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContract",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPartyToContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePartyFromContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRegisteredContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPartyMemberOfContract",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdsRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPartyToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePartyFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRegisteredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPartyMemberOfContract",
    data: BytesLike
  ): Result;

  events: {
    "AddedSharedMember(uint256,address,address)": EventFragment;
    "NewContractRegistered(address,address,address[])": EventFragment;
    "PartyAdded(address,address)": EventFragment;
    "PartyRemoved(address,address)": EventFragment;
    "RemovedSharedMember(uint256,address,address)": EventFragment;
    "ResetExclusiveMember(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewContractRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetExclusiveMember"): EventFragment;
}

export class Registry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryInterface;

  functions: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

    "contractMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "registeredContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    removePartyFromContract(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    "removePartyFromContract(address)"(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Adds `newMember` to the shared role, `roleId`.
   * @param newMember the new SharedRole member.
   * @param roleId the SharedRole membership to modify.
   */
  addMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Adds `newMember` to the shared role, `roleId`.
   * @param newMember the new SharedRole member.
   * @param roleId the SharedRole membership to modify.
   */
  "addMember(uint256,address)"(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

  "contractMap(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

  /**
   * Reverts if `roleId` does not represent an initialized, exclusive role.
   * Gets the current holder of the exclusive role, `roleId`.
   * @param roleId the ExclusiveRole membership to check.
   */
  getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Reverts if `roleId` does not represent an initialized, exclusive role.
   * Gets the current holder of the exclusive role, `roleId`.
   * @param roleId the ExclusiveRole membership to check.
   */
  "getMember(uint256)"(
    roleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Reverts if roleId does not correspond to an initialized role.
   * Whether `memberToCheck` is a member of roleId.
   * @param memberToCheck the address to check.
   * @param roleId the Role to check.
   */
  holdsRole(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Reverts if roleId does not correspond to an initialized role.
   * Whether `memberToCheck` is a member of roleId.
   * @param memberToCheck the address to check.
   * @param roleId the Role to check.
   */
  "holdsRole(uint256,address)"(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registeredContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "registeredContracts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Removes `memberToRemove` from the shared role, `roleId`.
   * @param memberToRemove the current SharedRole member to remove.
   * @param roleId the SharedRole membership to modify.
   */
  removeMember(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Removes `memberToRemove` from the shared role, `roleId`.
   * @param memberToRemove the current SharedRole member to remove.
   * @param roleId the SharedRole membership to modify.
   */
  "removeMember(uint256,address)"(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
   * Removes caller from the role, `roleId`.
   * @param roleId the SharedRole membership to modify.
   */
  renounceMembership(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
   * Removes caller from the role, `roleId`.
   * @param roleId the SharedRole membership to modify.
   */
  "renounceMembership(uint256)"(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
   * Changes the exclusive role holder of `roleId` to `newMember`.
   * @param newMember the new ExclusiveRole member.
   * @param roleId the ExclusiveRole membership to modify.
   */
  resetMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
   * Changes the exclusive role holder of `roleId` to `newMember`.
   * @param newMember the new ExclusiveRole member.
   * @param roleId the ExclusiveRole membership to modify.
   */
  "resetMember(uint256,address)"(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only authorized contract creators can call this method.
   * Registers a new financial contract.
   * @param contractAddress address of the contract against which the parties are registered.
   * @param parties array of addresses who become parties in the contract.
   */
  registerContract(
    parties: string[],
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only authorized contract creators can call this method.
   * Registers a new financial contract.
   * @param contractAddress address of the contract against which the parties are registered.
   * @param parties array of addresses who become parties in the contract.
   */
  "registerContract(address[],address)"(
    parties: string[],
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender will be used to determine the contract that this party is added to.
   * Adds a party member to the calling contract.
   * @param party new party for the calling contract.
   */
  addPartyToContract(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender will be used to determine the contract that this party is added to.
   * Adds a party member to the calling contract.
   * @param party new party for the calling contract.
   */
  "addPartyToContract(address)"(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender will be used to determine the contract that this party is removed from.
   * Removes a party member from the calling contract.
   * @param partyAddress address to be removed from the calling contract.
   */
  removePartyFromContract(
    partyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender will be used to determine the contract that this party is removed from.
   * Removes a party member from the calling contract.
   * @param partyAddress address to be removed from the calling contract.
   */
  "removePartyFromContract(address)"(
    partyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * If it is registered, it is an authorized participant in the UMA system.
   * Returns whether the contract has been registered with the registry.
   * @param contractAddress address of the financial contract.
   */
  isContractRegistered(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * If it is registered, it is an authorized participant in the UMA system.
   * Returns whether the contract has been registered with the registry.
   * @param contractAddress address of the financial contract.
   */
  "isContractRegistered(address)"(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns a list of all contracts that are associated with a particular party.
   * @param party address of the party.
   */
  getRegisteredContracts(
    party: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Returns a list of all contracts that are associated with a particular party.
   * @param party address of the party.
   */
  "getRegisteredContracts(address)"(
    party: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Returns all registered contracts.
   */
  getAllRegisteredContracts(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns all registered contracts.
   */
  "getAllRegisteredContracts()"(overrides?: CallOverrides): Promise<string[]>;

  /**
   * checks if an address is a party of a contract.
   * @param contractAddress address to check against the party.
   * @param party party to check.
   */
  isPartyMemberOfContract(
    party: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * checks if an address is a party of a contract.
   * @param contractAddress address to check against the party.
   * @param party party to check.
   */
  "isPartyMemberOfContract(address,address)"(
    party: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

    "contractMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { valid: number; index: BigNumber }>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "registeredContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    addPartyToContract(party: string, overrides?: CallOverrides): Promise<void>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    removePartyFromContract(
      partyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    "removePartyFromContract(address)"(
      partyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(overrides?: CallOverrides): Promise<string[]>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AddedSharedMember(
      roleId: BigNumberish | null,
      newMember: string | null,
      manager: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    NewContractRegistered(
      contractAddress: string | null,
      creator: string | null,
      parties: null
    ): TypedEventFilter<
      [string, string, string[]],
      { contractAddress: string; creator: string; parties: string[] }
    >;

    PartyAdded(
      contractAddress: string | null,
      party: string | null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; party: string }
    >;

    PartyRemoved(
      contractAddress: string | null,
      party: string | null
    ): TypedEventFilter<
      [string, string],
      { contractAddress: string; party: string }
    >;

    RemovedSharedMember(
      roleId: BigNumberish | null,
      oldMember: string | null,
      manager: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    ResetExclusiveMember(
      roleId: BigNumberish | null,
      newMember: string | null,
      manager: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;
  };

  estimateGas: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "contractMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registeredContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    removePartyFromContract(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    "removePartyFromContract(address)"(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registeredContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new financial contract.
     * @param contractAddress address of the contract against which the parties are registered.
     * @param parties array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is added to.
     * Adds a party member to the calling contract.
     * @param party new party for the calling contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    removePartyFromContract(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender will be used to determine the contract that this party is removed from.
     * Removes a party member from the calling contract.
     * @param partyAddress address to be removed from the calling contract.
     */
    "removePartyFromContract(address)"(
      partyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the financial contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * checks if an address is a party of a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RegistryInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "registerContract(address[],address)": FunctionFragment;
    "isContractRegistered(address)": FunctionFragment;
    "getRegisteredContracts(address)": FunctionFragment;
    "getAllRegisteredContracts()": FunctionFragment;
    "addPartyToContract(address)": FunctionFragment;
    "removePartyFromContract(address)": FunctionFragment;
    "isPartyMemberOfContract(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "registerContract",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRegisteredContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPartyToContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePartyFromContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPartyMemberOfContract",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRegisteredContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPartyToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePartyFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPartyMemberOfContract",
    data: BytesLike
  ): Result;

  events: {};
}

export class RegistryInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RegistryInterfaceInterface;

  functions: {
    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    removePartyFromContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    "removePartyFromContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   * Only authorized contract creators can call this method.
   * Registers a new contract.
   * @param contractAddress defines the address of the deployed contract.
   * @param parties an array of addresses who become parties in the contract.
   */
  registerContract(
    parties: string[],
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only authorized contract creators can call this method.
   * Registers a new contract.
   * @param contractAddress defines the address of the deployed contract.
   * @param parties an array of addresses who become parties in the contract.
   */
  "registerContract(address[],address)"(
    parties: string[],
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * If it is registered, it is an authorized participant in the UMA system.
   * Returns whether the contract has been registered with the registry.
   * @param contractAddress address of the contract.
   */
  isContractRegistered(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * If it is registered, it is an authorized participant in the UMA system.
   * Returns whether the contract has been registered with the registry.
   * @param contractAddress address of the contract.
   */
  "isContractRegistered(address)"(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns a list of all contracts that are associated with a particular party.
   * @param party address of the party.
   */
  getRegisteredContracts(
    party: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Returns a list of all contracts that are associated with a particular party.
   * @param party address of the party.
   */
  "getRegisteredContracts(address)"(
    party: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Returns all registered contracts.
   */
  getAllRegisteredContracts(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns all registered contracts.
   */
  "getAllRegisteredContracts()"(overrides?: CallOverrides): Promise<string[]>;

  /**
   * msg.sender must be the contract to which the party member is added.
   * Adds a party to the calling contract.
   * @param party address to be added to the contract.
   */
  addPartyToContract(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender must be the contract to which the party member is added.
   * Adds a party to the calling contract.
   * @param party address to be added to the contract.
   */
  "addPartyToContract(address)"(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender must be the contract to which the party member is added.
   * Removes a party member to the calling contract.
   * @param party address to be removed from the contract.
   */
  removePartyFromContract(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * msg.sender must be the contract to which the party member is added.
   * Removes a party member to the calling contract.
   * @param party address to be removed from the contract.
   */
  "removePartyFromContract(address)"(
    party: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * checks if an address is a party in a contract.
   * @param contractAddress address to check against the party.
   * @param party party to check.
   */
  isPartyMemberOfContract(
    party: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * checks if an address is a party in a contract.
   * @param contractAddress address to check against the party.
   * @param party party to check.
   */
  "isPartyMemberOfContract(address,address)"(
    party: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(overrides?: CallOverrides): Promise<string[]>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    addPartyToContract(party: string, overrides?: CallOverrides): Promise<void>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    removePartyFromContract(
      party: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    "removePartyFromContract(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    removePartyFromContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    "removePartyFromContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    registerContract(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only authorized contract creators can call this method.
     * Registers a new contract.
     * @param contractAddress defines the address of the deployed contract.
     * @param parties an array of addresses who become parties in the contract.
     */
    "registerContract(address[],address)"(
      parties: string[],
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    isContractRegistered(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * If it is registered, it is an authorized participant in the UMA system.
     * Returns whether the contract has been registered with the registry.
     * @param contractAddress address of the contract.
     */
    "isContractRegistered(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    getRegisteredContracts(
      party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a list of all contracts that are associated with a particular party.
     * @param party address of the party.
     */
    "getRegisteredContracts(address)"(
      party: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns all registered contracts.
     */
    getAllRegisteredContracts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns all registered contracts.
     */
    "getAllRegisteredContracts()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    addPartyToContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Adds a party to the calling contract.
     * @param party address to be added to the contract.
     */
    "addPartyToContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    removePartyFromContract(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender must be the contract to which the party member is added.
     * Removes a party member to the calling contract.
     * @param party address to be removed from the contract.
     */
    "removePartyFromContract(address)"(
      party: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    isPartyMemberOfContract(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * checks if an address is a party in a contract.
     * @param contractAddress address to check against the party.
     * @param party party to check.
     */
    "isPartyMemberOfContract(address,address)"(
      party: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

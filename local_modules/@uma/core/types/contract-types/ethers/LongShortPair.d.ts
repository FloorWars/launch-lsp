/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LongShortPairInterface extends ethers.utils.Interface {
  functions: {
    "collateralPerPair()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "contractState()": FunctionFragment;
    "customAncillaryData()": FunctionFragment;
    "expirationTimestamp()": FunctionFragment;
    "expiryPercentLong()": FunctionFragment;
    "expiryPrice()": FunctionFragment;
    "financialProductLibrary()": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "longToken()": FunctionFragment;
    "optimisticOracleLivenessTime()": FunctionFragment;
    "optimisticOracleProposerBond()": FunctionFragment;
    "pairName()": FunctionFragment;
    "prepaidProposerReward()": FunctionFragment;
    "priceIdentifier()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "shortToken()": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "create(uint256)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "settle(uint256,uint256)": FunctionFragment;
    "expire()": FunctionFragment;
    "getPositionTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralPerPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customAncillaryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirationTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiryPercentLong",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "financialProductLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "longToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleLivenessTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticOracleProposerBond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepaidProposerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceIdentifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shortToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "expire", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPositionTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralPerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customAncillaryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryPercentLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "financialProductLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "longToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleLivenessTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticOracleProposerBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepaidProposerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shortToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expire", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionTokens",
    data: BytesLike
  ): Result;

  events: {
    "ContractExpired(address)": EventFragment;
    "PositionSettled(address,uint256,uint256,uint256)": EventFragment;
    "TokensCreated(address,uint256,uint256)": EventFragment;
    "TokensRedeemed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRedeemed"): EventFragment;
}

export class LongShortPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LongShortPairInterface;

  functions: {
    collateralPerPair(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateralPerPair()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    "collateralToken()"(overrides?: CallOverrides): Promise<[string]>;

    contractState(overrides?: CallOverrides): Promise<[number]>;

    "contractState()"(overrides?: CallOverrides): Promise<[number]>;

    customAncillaryData(overrides?: CallOverrides): Promise<[string]>;

    "customAncillaryData()"(overrides?: CallOverrides): Promise<[string]>;

    expirationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expirationTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiryPercentLong(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expiryPercentLong()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiryPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    financialProductLibrary(overrides?: CallOverrides): Promise<[string]>;

    "financialProductLibrary()"(overrides?: CallOverrides): Promise<[string]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    longToken(overrides?: CallOverrides): Promise<[string]>;

    "longToken()"(overrides?: CallOverrides): Promise<[string]>;

    optimisticOracleLivenessTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "optimisticOracleLivenessTime()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optimisticOracleProposerBond(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "optimisticOracleProposerBond()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pairName(overrides?: CallOverrides): Promise<[string]>;

    "pairName()"(overrides?: CallOverrides): Promise<[string]>;

    prepaidProposerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "prepaidProposerReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceIdentifier(overrides?: CallOverrides): Promise<[string]>;

    "priceIdentifier()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortToken(overrides?: CallOverrides): Promise<[string]>;

    "shortToken()"(overrides?: CallOverrides): Promise<[string]>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    create(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    "create(uint256)"(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    "redeem(uint256)"(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    "settle(uint256,uint256)"(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "expire()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    "getPositionTokens(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  collateralPerPair(overrides?: CallOverrides): Promise<BigNumber>;

  "collateralPerPair()"(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  "collateralToken()"(overrides?: CallOverrides): Promise<string>;

  contractState(overrides?: CallOverrides): Promise<number>;

  "contractState()"(overrides?: CallOverrides): Promise<number>;

  customAncillaryData(overrides?: CallOverrides): Promise<string>;

  "customAncillaryData()"(overrides?: CallOverrides): Promise<string>;

  expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "expirationTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  expiryPercentLong(overrides?: CallOverrides): Promise<BigNumber>;

  "expiryPercentLong()"(overrides?: CallOverrides): Promise<BigNumber>;

  expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "expiryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  financialProductLibrary(overrides?: CallOverrides): Promise<string>;

  "financialProductLibrary()"(overrides?: CallOverrides): Promise<string>;

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  longToken(overrides?: CallOverrides): Promise<string>;

  "longToken()"(overrides?: CallOverrides): Promise<string>;

  optimisticOracleLivenessTime(overrides?: CallOverrides): Promise<BigNumber>;

  "optimisticOracleLivenessTime()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optimisticOracleProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

  "optimisticOracleProposerBond()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pairName(overrides?: CallOverrides): Promise<string>;

  "pairName()"(overrides?: CallOverrides): Promise<string>;

  prepaidProposerReward(overrides?: CallOverrides): Promise<BigNumber>;

  "prepaidProposerReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceIdentifier(overrides?: CallOverrides): Promise<string>;

  "priceIdentifier()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortToken(overrides?: CallOverrides): Promise<string>;

  "shortToken()"(overrides?: CallOverrides): Promise<string>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  /**
   * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
   * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
   * @param tokensToCreate number of long and short synthetic tokens to create.
   */
  create(
    tokensToCreate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
   * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
   * @param tokensToCreate number of long and short synthetic tokens to create.
   */
  "create(uint256)"(
    tokensToCreate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
   * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
   * @param tokensToRedeem number of long and short synthetic tokens to redeem.
   */
  redeem(
    tokensToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
   * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
   * @param tokensToRedeem number of long and short synthetic tokens to redeem.
   */
  "redeem(uint256)"(
    tokensToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
   * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
   * @param longTokensToRedeem number of long tokens to settle.
   * @param shortTokensToRedeem number of short tokens to settle.
   */
  settle(
    longTokensToRedeem: BigNumberish,
    shortTokensToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
   * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
   * @param longTokensToRedeem number of long tokens to settle.
   * @param shortTokensToRedeem number of short tokens to settle.
   */
  "settle(uint256,uint256)"(
    longTokensToRedeem: BigNumberish,
    shortTokensToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expire(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "expire()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the number of long and short tokens a sponsor wallet holds.
   * @param sponsor address of the sponsor to query.
   */
  getPositionTokens(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  /**
   * Returns the number of long and short tokens a sponsor wallet holds.
   * @param sponsor address of the sponsor to query.
   */
  "getPositionTokens(address)"(
    sponsor: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  callStatic: {
    collateralPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPerPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    "collateralToken()"(overrides?: CallOverrides): Promise<string>;

    contractState(overrides?: CallOverrides): Promise<number>;

    "contractState()"(overrides?: CallOverrides): Promise<number>;

    customAncillaryData(overrides?: CallOverrides): Promise<string>;

    "customAncillaryData()"(overrides?: CallOverrides): Promise<string>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "expirationTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiryPercentLong(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryPercentLong()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    financialProductLibrary(overrides?: CallOverrides): Promise<string>;

    "financialProductLibrary()"(overrides?: CallOverrides): Promise<string>;

    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    longToken(overrides?: CallOverrides): Promise<string>;

    "longToken()"(overrides?: CallOverrides): Promise<string>;

    optimisticOracleLivenessTime(overrides?: CallOverrides): Promise<BigNumber>;

    "optimisticOracleLivenessTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimisticOracleProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

    "optimisticOracleProposerBond()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairName(overrides?: CallOverrides): Promise<string>;

    "pairName()"(overrides?: CallOverrides): Promise<string>;

    prepaidProposerReward(overrides?: CallOverrides): Promise<BigNumber>;

    "prepaidProposerReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceIdentifier(overrides?: CallOverrides): Promise<string>;

    "priceIdentifier()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shortToken(overrides?: CallOverrides): Promise<string>;

    "shortToken()"(overrides?: CallOverrides): Promise<string>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    create(
      tokensToCreate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    "create(uint256)"(
      tokensToCreate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    "redeem(uint256)"(
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    "settle(uint256,uint256)"(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expire(overrides?: CallOverrides): Promise<void>;

    "expire()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    "getPositionTokens(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    ContractExpired(
      caller: string | null
    ): TypedEventFilter<[string], { caller: string }>;

    PositionSettled(
      sponsor: string | null,
      collateralReturned: null,
      longTokens: null,
      shortTokens: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sponsor: string;
        collateralReturned: BigNumber;
        longTokens: BigNumber;
        shortTokens: BigNumber;
      }
    >;

    TokensCreated(
      sponsor: string | null,
      collateralUsed: BigNumberish | null,
      tokensMinted: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sponsor: string; collateralUsed: BigNumber; tokensMinted: BigNumber }
    >;

    TokensRedeemed(
      sponsor: string | null,
      collateralReturned: BigNumberish | null,
      tokensRedeemed: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        sponsor: string;
        collateralReturned: BigNumber;
        tokensRedeemed: BigNumber;
      }
    >;
  };

  estimateGas: {
    collateralPerPair(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralPerPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractState(overrides?: CallOverrides): Promise<BigNumber>;

    "contractState()"(overrides?: CallOverrides): Promise<BigNumber>;

    customAncillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    "customAncillaryData()"(overrides?: CallOverrides): Promise<BigNumber>;

    expirationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "expirationTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiryPercentLong(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryPercentLong()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    financialProductLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    "financialProductLibrary()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    longToken(overrides?: CallOverrides): Promise<BigNumber>;

    "longToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticOracleLivenessTime(overrides?: CallOverrides): Promise<BigNumber>;

    "optimisticOracleLivenessTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optimisticOracleProposerBond(overrides?: CallOverrides): Promise<BigNumber>;

    "optimisticOracleProposerBond()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairName(overrides?: CallOverrides): Promise<BigNumber>;

    "pairName()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidProposerReward(overrides?: CallOverrides): Promise<BigNumber>;

    "prepaidProposerReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    "priceIdentifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shortToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    create(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    "create(uint256)"(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    "redeem(uint256)"(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    "settle(uint256,uint256)"(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "expire()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    "getPositionTokens(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralPerPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralPerPair()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateralToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contractState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customAncillaryData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "customAncillaryData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "expirationTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiryPercentLong(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiryPercentLong()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiryPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    financialProductLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "financialProductLibrary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "longToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticOracleLivenessTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optimisticOracleLivenessTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optimisticOracleProposerBond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optimisticOracleProposerBond()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pairName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidProposerReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prepaidProposerReward()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceIdentifier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shortToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    create(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    "create(uint256)"(
      tokensToCreate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    redeem(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    "redeem(uint256)"(
      tokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    settle(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    "settle(uint256,uint256)"(
      longTokensToRedeem: BigNumberish,
      shortTokensToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expire(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "expire()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    getPositionTokens(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    "getPositionTokens(address)"(
      sponsor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

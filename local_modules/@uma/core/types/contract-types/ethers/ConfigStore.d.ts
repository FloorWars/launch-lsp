/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ConfigStoreInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingConfig()": FunctionFragment;
    "pendingPassedTimestamp()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAndGetCurrentConfig()": FunctionFragment;
    "proposeNewConfig(tuple)": FunctionFragment;
    "publishPendingConfig()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPassedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndGetCurrentConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewConfig",
    values: [
      {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishPendingConfig",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPassedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAndGetCurrentConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishPendingConfig",
    data: BytesLike
  ): Result;

  events: {
    "ChangedConfigSettings(uint256,uint256,uint256,int256,int256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposedNewConfigSettings(address,uint256,uint256,uint256,int256,int256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangedConfigSettings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposedNewConfigSettings"): EventFragment;
}

export class ConfigStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConfigStoreInterface;

  functions: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    "pendingConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    pendingPassedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pendingPassedTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    updateAndGetCurrentConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    "updateAndGetCurrentConfig()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeNewConfig((uint256,(uint256),(uint256),(int256),(int256),uint256))"(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    publishPendingConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    "publishPendingConfig()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber
    ] & {
      timelockLiveness: BigNumber;
      rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
      proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
      maxFundingRate: [BigNumber] & { rawValue: BigNumber };
      minFundingRate: [BigNumber] & { rawValue: BigNumber };
      proposalTimePastLimit: BigNumber;
    }
  >;

  "pendingConfig()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      BigNumber
    ] & {
      timelockLiveness: BigNumber;
      rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
      proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
      maxFundingRate: [BigNumber] & { rawValue: BigNumber };
      minFundingRate: [BigNumber] & { rawValue: BigNumber };
      proposalTimePastLimit: BigNumber;
    }
  >;

  pendingPassedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "pendingPassedTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns current config or pending config if pending liveness has expired.
   */
  updateAndGetCurrentConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns current config or pending config if pending liveness has expired.
   */
  "updateAndGetCurrentConfig()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNewConfig(
    newConfig: {
      timelockLiveness: BigNumberish;
      rewardRatePerSecond: { rawValue: BigNumberish };
      proposerBondPercentage: { rawValue: BigNumberish };
      maxFundingRate: { rawValue: BigNumberish };
      minFundingRate: { rawValue: BigNumberish };
      proposalTimePastLimit: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeNewConfig((uint256,(uint256),(uint256),(int256),(int256),uint256))"(
    newConfig: {
      timelockLiveness: BigNumberish;
      rewardRatePerSecond: { rawValue: BigNumberish };
      proposerBondPercentage: { rawValue: BigNumberish };
      maxFundingRate: { rawValue: BigNumberish };
      minFundingRate: { rawValue: BigNumberish };
      proposalTimePastLimit: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
   */
  publishPendingConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
   */
  "publishPendingConfig()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    "pendingConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    pendingPassedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingPassedTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    updateAndGetCurrentConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    "updateAndGetCurrentConfig()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        BigNumber
      ] & {
        timelockLiveness: BigNumber;
        rewardRatePerSecond: [BigNumber] & { rawValue: BigNumber };
        proposerBondPercentage: [BigNumber] & { rawValue: BigNumber };
        maxFundingRate: [BigNumber] & { rawValue: BigNumber };
        minFundingRate: [BigNumber] & { rawValue: BigNumber };
        proposalTimePastLimit: BigNumber;
      }
    >;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeNewConfig((uint256,(uint256),(uint256),(int256),(int256),uint256))"(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    publishPendingConfig(overrides?: CallOverrides): Promise<void>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    "publishPendingConfig()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ChangedConfigSettings(
      rewardRatePerSecond: null,
      proposerBondPercentage: null,
      timelockLiveness: null,
      maxFundingRate: null,
      minFundingRate: null,
      proposalTimePastLimit: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        rewardRatePerSecond: BigNumber;
        proposerBondPercentage: BigNumber;
        timelockLiveness: BigNumber;
        maxFundingRate: BigNumber;
        minFundingRate: BigNumber;
        proposalTimePastLimit: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    ProposedNewConfigSettings(
      proposer: string | null,
      rewardRatePerSecond: null,
      proposerBondPercentage: null,
      timelockLiveness: null,
      maxFundingRate: null,
      minFundingRate: null,
      proposalTimePastLimit: null,
      proposalPassedTimestamp: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        proposer: string;
        rewardRatePerSecond: BigNumber;
        proposerBondPercentage: BigNumber;
        timelockLiveness: BigNumber;
        maxFundingRate: BigNumber;
        minFundingRate: BigNumber;
        proposalTimePastLimit: BigNumber;
        proposalPassedTimestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingConfig(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingConfig()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPassedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingPassedTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    updateAndGetCurrentConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    "updateAndGetCurrentConfig()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeNewConfig((uint256,(uint256),(uint256),(int256),(int256),uint256))"(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    publishPendingConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    "publishPendingConfig()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingConfig()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPassedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingPassedTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    updateAndGetCurrentConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns current config or pending config if pending liveness has expired.
     */
    "updateAndGetCurrentConfig()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewConfig(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeNewConfig((uint256,(uint256),(uint256),(int256),(int256),uint256))"(
      newConfig: {
        timelockLiveness: BigNumberish;
        rewardRatePerSecond: { rawValue: BigNumberish };
        proposerBondPercentage: { rawValue: BigNumberish };
        maxFundingRate: { rawValue: BigNumberish };
        minFundingRate: { rawValue: BigNumberish };
        proposalTimePastLimit: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    publishPendingConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Publish any pending configuration settings if there is a pending proposal that has passed liveness.
     */
    "publishPendingConfig()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

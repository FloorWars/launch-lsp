/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DesignatedVotingInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,address)": FunctionFragment;
    "getMember(uint256)": FunctionFragment;
    "holdsRole(uint256,address)": FunctionFragment;
    "removeMember(uint256,address)": FunctionFragment;
    "renounceMembership(uint256)": FunctionFragment;
    "resetMember(uint256,address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawErc20(address,uint256)": FunctionFragment;
    "commitVote(bytes32,uint256,bytes,bytes32)": FunctionFragment;
    "batchCommit(tuple[])": FunctionFragment;
    "revealVote(bytes32,uint256,int256,bytes,int256)": FunctionFragment;
    "batchReveal(tuple[])": FunctionFragment;
    "retrieveRewards(uint256,tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMember",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceMembership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetMember",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawErc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitVote",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCommit",
    values: [
      {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealVote",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchReveal",
    values: [
      {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRewards",
    values: [
      BigNumberish,
      { identifier: BytesLike; time: BigNumberish; ancillaryData: BytesLike }[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holdsRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRewards",
    data: BytesLike
  ): Result;

  events: {
    "AddedSharedMember(uint256,address,address)": EventFragment;
    "RemovedSharedMember(uint256,address,address)": EventFragment;
    "ResetExclusiveMember(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedSharedMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetExclusiveMember"): EventFragment;
}

export class DesignatedVoting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DesignatedVotingInterface;

  functions: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws ETH from the contract.
     */
    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws ETH from the contract.
     */
    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    "withdrawErc20(address,uint256)"(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchCommit(tuple[])"(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchReveal(tuple[])"(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveRewards(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "retrieveRewards(uint256,tuple[])"(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Adds `newMember` to the shared role, `roleId`.
   * @param newMember the new SharedRole member.
   * @param roleId the SharedRole membership to modify.
   */
  addMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Adds `newMember` to the shared role, `roleId`.
   * @param newMember the new SharedRole member.
   * @param roleId the SharedRole membership to modify.
   */
  "addMember(uint256,address)"(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if `roleId` does not represent an initialized, exclusive role.
   * Gets the current holder of the exclusive role, `roleId`.
   * @param roleId the ExclusiveRole membership to check.
   */
  getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Reverts if `roleId` does not represent an initialized, exclusive role.
   * Gets the current holder of the exclusive role, `roleId`.
   * @param roleId the ExclusiveRole membership to check.
   */
  "getMember(uint256)"(
    roleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Reverts if roleId does not correspond to an initialized role.
   * Whether `memberToCheck` is a member of roleId.
   * @param memberToCheck the address to check.
   * @param roleId the Role to check.
   */
  holdsRole(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Reverts if roleId does not correspond to an initialized role.
   * Whether `memberToCheck` is a member of roleId.
   * @param memberToCheck the address to check.
   * @param roleId the Role to check.
   */
  "holdsRole(uint256,address)"(
    roleId: BigNumberish,
    memberToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Removes `memberToRemove` from the shared role, `roleId`.
   * @param memberToRemove the current SharedRole member to remove.
   * @param roleId the SharedRole membership to modify.
   */
  removeMember(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
   * Removes `memberToRemove` from the shared role, `roleId`.
   * @param memberToRemove the current SharedRole member to remove.
   * @param roleId the SharedRole membership to modify.
   */
  "removeMember(uint256,address)"(
    roleId: BigNumberish,
    memberToRemove: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
   * Removes caller from the role, `roleId`.
   * @param roleId the SharedRole membership to modify.
   */
  renounceMembership(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
   * Removes caller from the role, `roleId`.
   * @param roleId the SharedRole membership to modify.
   */
  "renounceMembership(uint256)"(
    roleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
   * Changes the exclusive role holder of `roleId` to `newMember`.
   * @param newMember the new ExclusiveRole member.
   * @param roleId the ExclusiveRole membership to modify.
   */
  resetMember(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
   * Changes the exclusive role holder of `roleId` to `newMember`.
   * @param newMember the new ExclusiveRole member.
   * @param roleId the ExclusiveRole membership to modify.
   */
  "resetMember(uint256,address)"(
    roleId: BigNumberish,
    newMember: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws ETH from the contract.
   */
  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws ETH from the contract.
   */
  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws ERC20 tokens from the contract.
   * @param amount amount of tokens to withdraw.
   * @param erc20Address ERC20 token to withdraw.
   */
  withdrawErc20(
    erc20Address: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws ERC20 tokens from the contract.
   * @param amount amount of tokens to withdraw.
   * @param erc20Address ERC20 token to withdraw.
   */
  "withdrawErc20(address,uint256)"(
    erc20Address: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Forwards a commit to Voting.
   * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
   * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
   * @param time specifies the unix timestamp of the price being voted on.
   */
  commitVote(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Forwards a commit to Voting.
   * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
   * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
   * @param time specifies the unix timestamp of the price being voted on.
   */
  "commitVote(bytes32,uint256,bytes,bytes32)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCommit(
    commits: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
      hash: BytesLike;
      encryptedVote: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchCommit(tuple[])"(
    commits: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
      hash: BytesLike;
      encryptedVote: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Forwards a reveal to Voting.
   * @param identifier voted on in the commit phase. EG BTC/USD price pair.
   * @param price used along with the `salt` to produce the `hash` during the commit phase.
   * @param salt used along with the `price` to produce the `hash` during the commit phase.
   * @param time specifies the unix timestamp of the price being voted on.
   */
  revealVote(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    ancillaryData: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Forwards a reveal to Voting.
   * @param identifier voted on in the commit phase. EG BTC/USD price pair.
   * @param price used along with the `salt` to produce the `hash` during the commit phase.
   * @param salt used along with the `price` to produce the `hash` during the commit phase.
   * @param time specifies the unix timestamp of the price being voted on.
   */
  "revealVote(bytes32,uint256,int256,bytes,int256)"(
    identifier: BytesLike,
    time: BigNumberish,
    price: BigNumberish,
    ancillaryData: BytesLike,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchReveal(
    reveals: {
      identifier: BytesLike;
      time: BigNumberish;
      price: BigNumberish;
      ancillaryData: BytesLike;
      salt: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchReveal(tuple[])"(
    reveals: {
      identifier: BytesLike;
      time: BigNumberish;
      price: BigNumberish;
      ancillaryData: BytesLike;
      salt: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveRewards(
    roundId: BigNumberish,
    toRetrieve: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "retrieveRewards(uint256,tuple[])"(
    roundId: BigNumberish,
    toRetrieve: {
      identifier: BytesLike;
      time: BigNumberish;
      ancillaryData: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(roleId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws ETH from the contract.
     */
    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Withdraws ETH from the contract.
     */
    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    "withdrawErc20(address,uint256)"(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchCommit(tuple[])"(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchReveal(tuple[])"(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveRewards(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "retrieveRewards(uint256,tuple[])"(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;
  };

  filters: {
    AddedSharedMember(
      roleId: BigNumberish | null,
      newMember: string | null,
      manager: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;

    RemovedSharedMember(
      roleId: BigNumberish | null,
      oldMember: string | null,
      manager: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; oldMember: string; manager: string }
    >;

    ResetExclusiveMember(
      roleId: BigNumberish | null,
      newMember: string | null,
      manager: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { roleId: BigNumber; newMember: string; manager: string }
    >;
  };

  estimateGas: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws ETH from the contract.
     */
    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws ETH from the contract.
     */
    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    "withdrawErc20(address,uint256)"(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchCommit(tuple[])"(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchReveal(tuple[])"(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveRewards(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "retrieveRewards(uint256,tuple[])"(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    addMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Adds `newMember` to the shared role, `roleId`.
     * @param newMember the new SharedRole member.
     * @param roleId the SharedRole membership to modify.
     */
    "addMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    getMember(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, exclusive role.
     * Gets the current holder of the exclusive role, `roleId`.
     * @param roleId the ExclusiveRole membership to check.
     */
    "getMember(uint256)"(
      roleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    holdsRole(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if roleId does not correspond to an initialized role.
     * Whether `memberToCheck` is a member of roleId.
     * @param memberToCheck the address to check.
     * @param roleId the Role to check.
     */
    "holdsRole(uint256,address)"(
      roleId: BigNumberish,
      memberToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    removeMember(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.
     * Removes `memberToRemove` from the shared role, `roleId`.
     * @param memberToRemove the current SharedRole member to remove.
     * @param roleId the SharedRole membership to modify.
     */
    "removeMember(uint256,address)"(
      roleId: BigNumberish,
      memberToRemove: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    renounceMembership(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.
     * Removes caller from the role, `roleId`.
     * @param roleId the SharedRole membership to modify.
     */
    "renounceMembership(uint256)"(
      roleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    resetMember(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.
     * Changes the exclusive role holder of `roleId` to `newMember`.
     * @param newMember the new ExclusiveRole member.
     * @param roleId the ExclusiveRole membership to modify.
     */
    "resetMember(uint256,address)"(
      roleId: BigNumberish,
      newMember: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws ETH from the contract.
     */
    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws ETH from the contract.
     */
    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    withdrawErc20(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws ERC20 tokens from the contract.
     * @param amount amount of tokens to withdraw.
     * @param erc20Address ERC20 token to withdraw.
     */
    "withdrawErc20(address,uint256)"(
      erc20Address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    commitVote(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Forwards a commit to Voting.
     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.
     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "commitVote(bytes32,uint256,bytes,bytes32)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCommit(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchCommit(tuple[])"(
      commits: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
        hash: BytesLike;
        encryptedVote: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    revealVote(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Forwards a reveal to Voting.
     * @param identifier voted on in the commit phase. EG BTC/USD price pair.
     * @param price used along with the `salt` to produce the `hash` during the commit phase.
     * @param salt used along with the `price` to produce the `hash` during the commit phase.
     * @param time specifies the unix timestamp of the price being voted on.
     */
    "revealVote(bytes32,uint256,int256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      price: BigNumberish,
      ancillaryData: BytesLike,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchReveal(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchReveal(tuple[])"(
      reveals: {
        identifier: BytesLike;
        time: BigNumberish;
        price: BigNumberish;
        ancillaryData: BytesLike;
        salt: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveRewards(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "retrieveRewards(uint256,tuple[])"(
      roundId: BigNumberish,
      toRetrieve: {
        identifier: BytesLike;
        time: BigNumberish;
        ancillaryData: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IERCHandlerInterface extends ethers.utils.Interface {
  functions: {
    "setResource(bytes32,address)": FunctionFragment;
    "setBurnable(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setResource",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setBurnable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "setResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IERCHandler extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IERCHandlerInterface;

  functions: {
    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "setResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    setBurnable(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    "setBurnable(address)"(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    withdraw(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    "withdraw(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Correlates {resourceID} with {contractAddress}.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param resourceID ResourceID to be used when making deposits.
   */
  setResource(
    resourceID: BytesLike,
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Correlates {resourceID} with {contractAddress}.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param resourceID ResourceID to be used when making deposits.
   */
  "setResource(bytes32,address)"(
    resourceID: BytesLike,
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Marks {contractAddress} as mintable/burnable.
   * @param contractAddress Address of contract to be used when making or executing deposits.
   */
  setBurnable(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Marks {contractAddress} as mintable/burnable.
   * @param contractAddress Address of contract to be used when making or executing deposits.
   */
  "setBurnable(address)"(
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Used to manually release funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
   * @param recipient Address to release tokens to.
   * @param tokenAddress Address of token contract to release.
   */
  withdraw(
    tokenAddress: string,
    recipient: string,
    amountOrTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Used to manually release funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
   * @param recipient Address to release tokens to.
   * @param tokenAddress Address of token contract to release.
   */
  "withdraw(address,address,uint256)"(
    tokenAddress: string,
    recipient: string,
    amountOrTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "setResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    setBurnable(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    "setBurnable(address)"(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    withdraw(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    "withdraw(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "setResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    setBurnable(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    "setBurnable(address)"(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    withdraw(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    "withdraw(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    setResource(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Correlates {resourceID} with {contractAddress}.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param resourceID ResourceID to be used when making deposits.
     */
    "setResource(bytes32,address)"(
      resourceID: BytesLike,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    setBurnable(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Marks {contractAddress} as mintable/burnable.
     * @param contractAddress Address of contract to be used when making or executing deposits.
     */
    "setBurnable(address)"(
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    withdraw(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Used to manually release funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.
     * @param recipient Address to release tokens to.
     * @param tokenAddress Address of token contract to release.
     */
    "withdraw(address,address,uint256)"(
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

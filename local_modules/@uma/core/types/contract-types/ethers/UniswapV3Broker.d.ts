/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UniswapV3BrokerInterface extends ethers.utils.Interface {
  functions: {
    "swapToPrice(bool,address,address,uint160,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swapToPrice",
    values: [boolean, string, string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapToPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniswapV3Broker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapV3BrokerInterface;

  functions: {
    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    swapToPrice(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    "swapToPrice(bool,address,address,uint160,address,uint256)"(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
   * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
   * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
   * @param recipient address that the output tokens should be sent to.
   * @param sqrtRatioTargetX96 target, encoded price.
   * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
   * @param uniswapPool address of the pool to uniswap v3 trade against.
   * @param uniswapRouter address of the uniswap v3 router to route the trade.
   */
  swapToPrice(
    tradingAsEOA: boolean,
    uniswapPool: string,
    uniswapRouter: string,
    sqrtRatioTargetX96: BigNumberish,
    recipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
   * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
   * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
   * @param recipient address that the output tokens should be sent to.
   * @param sqrtRatioTargetX96 target, encoded price.
   * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
   * @param uniswapPool address of the pool to uniswap v3 trade against.
   * @param uniswapRouter address of the uniswap v3 router to route the trade.
   */
  "swapToPrice(bool,address,address,uint160,address,uint256)"(
    tradingAsEOA: boolean,
    uniswapPool: string,
    uniswapRouter: string,
    sqrtRatioTargetX96: BigNumberish,
    recipient: string,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    swapToPrice(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    "swapToPrice(bool,address,address,uint160,address,uint256)"(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    swapToPrice(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    "swapToPrice(bool,address,address,uint160,address,uint256)"(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    swapToPrice(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    "swapToPrice(bool,address,address,uint160,address,uint256)"(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

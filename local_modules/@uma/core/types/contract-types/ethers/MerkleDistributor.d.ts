/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MerkleDistributorInterface extends ethers.utils.Interface {
  functions: {
    "merkleWindows(uint256)": FunctionFragment;
    "nextCreatedIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setWindow(uint256,address,bytes32,string)": FunctionFragment;
    "deleteWindow(uint256)": FunctionFragment;
    "withdrawRewards(address,uint256)": FunctionFragment;
    "claimMulti(tuple[])": FunctionFragment;
    "claim(tuple)": FunctionFragment;
    "isClaimed(uint256,uint256)": FunctionFragment;
    "verifyClaim(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "merkleWindows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCreatedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWindow",
    values: [BigNumberish, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMulti",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [
      {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "merkleWindows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCreatedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWindow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimMulti", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,address,uint256,uint256,address)": EventFragment;
    "CreatedWindow(uint256,uint256,address,address)": EventFragment;
    "DeleteWindow(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawRewards(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedWindow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteWindow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRewards"): EventFragment;
}

export class MerkleDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleDistributorInterface;

  functions: {
    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        merkleRoot: string;
        rewardToken: string;
        ipfsHash: string;
      }
    >;

    "merkleWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        merkleRoot: string;
        rewardToken: string;
        ipfsHash: string;
      }
    >;

    nextCreatedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextCreatedIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    "setWindow(uint256,address,bytes32,string)"(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    "deleteWindow(uint256)"(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    "withdrawRewards(address,uint256)"(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimMulti(tuple[])"(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    "isClaimed(uint256,uint256)"(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    "verifyClaim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;
  };

  merkleWindows(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      merkleRoot: string;
      rewardToken: string;
      ipfsHash: string;
    }
  >;

  "merkleWindows(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      merkleRoot: string;
      rewardToken: string;
      ipfsHash: string;
    }
  >;

  nextCreatedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "nextCreatedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
   * @param ipfsHash hash of IPFS object, conveniently stored for clients
   * @param merkleRoot merkle root describing allocation.
   * @param rewardToken ERC20 reward token.
   * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
   */
  setWindow(
    rewardsToDeposit: BigNumberish,
    rewardToken: string,
    merkleRoot: BytesLike,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
   * @param ipfsHash hash of IPFS object, conveniently stored for clients
   * @param merkleRoot merkle root describing allocation.
   * @param rewardToken ERC20 reward token.
   * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
   */
  "setWindow(uint256,address,bytes32,string)"(
    rewardsToDeposit: BigNumberish,
    rewardToken: string,
    merkleRoot: BytesLike,
    ipfsHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
   * Delete merkle root at window index.
   * @param windowIndex merkle root index to delete.
   */
  deleteWindow(
    windowIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
   * Delete merkle root at window index.
   * @param windowIndex merkle root index to delete.
   */
  "deleteWindow(uint256)"(
    windowIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Callable only by owner.
   * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
   * @param amount amount of rewards to withdraw.
   * @param rewardCurrency rewards to withdraw from contract.
   */
  withdrawRewards(
    rewardCurrency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Callable only by owner.
   * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
   * @param amount amount of rewards to withdraw.
   * @param rewardCurrency rewards to withdraw from contract.
   */
  "withdrawRewards(address,uint256)"(
    rewardCurrency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimMulti(
    claims: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimMulti(tuple[])"(
    claims: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim((uint256,uint256,uint256,address,bytes32[]))"(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
   * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
   * @param accountIndex account index to check within window index.
   * @param windowIndex merkle root to check.
   */
  isClaimed(
    windowIndex: BigNumberish,
    accountIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
   * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
   * @param accountIndex account index to check within window index.
   * @param windowIndex merkle root to check.
   */
  "isClaimed(uint256,uint256)"(
    windowIndex: BigNumberish,
    accountIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyClaim(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyClaim((uint256,uint256,uint256,address,bytes32[]))"(
    _claim: {
      windowIndex: BigNumberish;
      amount: BigNumberish;
      accountIndex: BigNumberish;
      account: string;
      merkleProof: BytesLike[];
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        merkleRoot: string;
        rewardToken: string;
        ipfsHash: string;
      }
    >;

    "merkleWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        merkleRoot: string;
        rewardToken: string;
        ipfsHash: string;
      }
    >;

    nextCreatedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "nextCreatedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    "setWindow(uint256,address,bytes32,string)"(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    "deleteWindow(uint256)"(
      windowIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    "withdrawRewards(address,uint256)"(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimMulti(tuple[])"(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "claim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    "isClaimed(uint256,uint256)"(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyClaim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Claimed(
      caller: string | null,
      windowIndex: null,
      account: string | null,
      accountIndex: null,
      amount: null,
      rewardToken: string | null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber, string],
      {
        caller: string;
        windowIndex: BigNumber;
        account: string;
        accountIndex: BigNumber;
        amount: BigNumber;
        rewardToken: string;
      }
    >;

    CreatedWindow(
      windowIndex: BigNumberish | null,
      rewardsDeposited: null,
      rewardToken: string | null,
      owner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        windowIndex: BigNumber;
        rewardsDeposited: BigNumber;
        rewardToken: string;
        owner: string;
      }
    >;

    DeleteWindow(
      windowIndex: BigNumberish | null,
      owner: null
    ): TypedEventFilter<
      [BigNumber, string],
      { windowIndex: BigNumber; owner: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    WithdrawRewards(
      owner: string | null,
      amount: null,
      currency: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { owner: string; amount: BigNumber; currency: string }
    >;
  };

  estimateGas: {
    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextCreatedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "nextCreatedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    "setWindow(uint256,address,bytes32,string)"(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    "deleteWindow(uint256)"(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    "withdrawRewards(address,uint256)"(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimMulti(tuple[])"(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    "isClaimed(uint256,uint256)"(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyClaim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    merkleWindows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleWindows(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextCreatedIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextCreatedIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    setWindow(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set merkle root for the next available window index and seed allocations.Callable only by owner of this contract. Caller must have approved this contract to transfer      `rewardsToDeposit` amount of `rewardToken` or this call will fail. Importantly, we assume that the      owner of this contract correctly chooses an amount `rewardsToDeposit` that is sufficient to cover all      claims within the `merkleRoot`. Otherwise, a race condition can be created. This situation can occur      because we do not segregate reward balances by window, for code simplicity purposes.      (If `rewardsToDeposit` is purposefully insufficient to payout all claims, then the admin must      subsequently transfer in rewards or the following situation can occur).      Example race situation:          - Window 1 Tree: Owner sets `rewardsToDeposit=100` and insert proofs that give claimant A 50 tokens and            claimant B 51 tokens. The owner has made an error by not setting the `rewardsToDeposit` correctly to 101.          - Window 2 Tree: Owner sets `rewardsToDeposit=1` and insert proofs that give claimant A 1 token. The owner            correctly set `rewardsToDeposit` this time.          - At this point contract owns 100 + 1 = 101 tokens. Now, imagine the following sequence:              (1) Claimant A claims 50 tokens for Window 1, contract now has 101 - 50 = 51 tokens.              (2) Claimant B claims 51 tokens for Window 1, contract now has 51 - 51 = 0 tokens.              (3) Claimant A tries to claim 1 token for Window 2 but fails because contract has 0 tokens.          - In summary, the contract owner created a race for step(2) and step(3) in which the first claim would            succeed and the second claim would fail, even though both claimants would expect their claims to succeed.
     * @param ipfsHash hash of IPFS object, conveniently stored for clients
     * @param merkleRoot merkle root describing allocation.
     * @param rewardToken ERC20 reward token.
     * @param rewardsToDeposit amount of rewards to deposit to seed this allocation.
     */
    "setWindow(uint256,address,bytes32,string)"(
      rewardsToDeposit: BigNumberish,
      rewardToken: string,
      merkleRoot: BytesLike,
      ipfsHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    deleteWindow(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Callable only by owner. Likely to be followed by a withdrawRewards call to clear contract state.
     * Delete merkle root at window index.
     * @param windowIndex merkle root index to delete.
     */
    "deleteWindow(uint256)"(
      windowIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    withdrawRewards(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Callable only by owner.
     * Emergency method that transfers rewards out of the contract if the contract was configured improperly.
     * @param amount amount of rewards to withdraw.
     * @param rewardCurrency rewards to withdraw from contract.
     */
    "withdrawRewards(address,uint256)"(
      rewardCurrency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimMulti(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimMulti(tuple[])"(
      claims: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    isClaimed(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This method will only work as intended if all `accountIndex`'s are unique for a given `windowIndex`.         The onus is on the Owner of this contract to submit only valid Merkle roots.
     * Returns True if the claim for `accountIndex` has already been completed for the Merkle root at         `windowIndex`.
     * @param accountIndex account index to check within window index.
     * @param windowIndex merkle root to check.
     */
    "isClaimed(uint256,uint256)"(
      windowIndex: BigNumberish,
      accountIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyClaim((uint256,uint256,uint256,address,bytes32[]))"(
      _claim: {
        windowIndex: BigNumberish;
        amount: BigNumberish;
        accountIndex: BigNumberish;
        account: string;
        merkleProof: BytesLike[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

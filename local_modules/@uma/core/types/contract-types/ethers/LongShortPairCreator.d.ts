/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LongShortPairCreatorInterface extends ethers.utils.Interface {
  functions: {
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "createLongShortPair(tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLongShortPair",
    values: [
      {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLongShortPair",
    data: BytesLike
  ): Result;

  events: {
    "CreatedLongShortPair(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedLongShortPair"): EventFragment;
}

export class LongShortPairCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LongShortPairCreatorInterface;

  functions: {
    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<[string]>;

    createLongShortPair(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createLongShortPair((string,uint64,uint256,bytes32,string,string,string,string,address,address,bytes,uint256,uint256,uint256))"(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

  createLongShortPair(
    params: {
      pairName: string;
      expirationTimestamp: BigNumberish;
      collateralPerPair: BigNumberish;
      priceIdentifier: BytesLike;
      longSynthName: string;
      longSynthSymbol: string;
      shortSynthName: string;
      shortSynthSymbol: string;
      collateralToken: string;
      financialProductLibrary: string;
      customAncillaryData: BytesLike;
      prepaidProposerReward: BigNumberish;
      optimisticOracleLivenessTime: BigNumberish;
      optimisticOracleProposerBond: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createLongShortPair((string,uint64,uint256,bytes32,string,string,string,string,address,address,bytes,uint256,uint256,uint256))"(
    params: {
      pairName: string;
      expirationTimestamp: BigNumberish;
      collateralPerPair: BigNumberish;
      priceIdentifier: BytesLike;
      longSynthName: string;
      longSynthSymbol: string;
      shortSynthName: string;
      shortSynthSymbol: string;
      collateralToken: string;
      financialProductLibrary: string;
      customAncillaryData: BytesLike;
      prepaidProposerReward: BigNumberish;
      optimisticOracleLivenessTime: BigNumberish;
      optimisticOracleProposerBond: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<string>;

    createLongShortPair(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "createLongShortPair((string,uint64,uint256,bytes32,string,string,string,string,address,address,bytes,uint256,uint256,uint256))"(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CreatedLongShortPair(
      longShortPair: string | null,
      deployerAddress: string | null,
      longToken: null,
      shortToken: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        longShortPair: string;
        deployerAddress: string;
        longToken: string;
        shortToken: string;
      }
    >;
  };

  estimateGas: {
    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    createLongShortPair(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createLongShortPair((string,uint64,uint256,bytes32,string,string,string,string,address,address,bytes,uint256,uint256,uint256))"(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLongShortPair(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createLongShortPair((string,uint64,uint256,bytes32,string,string,string,string,address,address,bytes,uint256,uint256,uint256))"(
      params: {
        pairName: string;
        expirationTimestamp: BigNumberish;
        collateralPerPair: BigNumberish;
        priceIdentifier: BytesLike;
        longSynthName: string;
        longSynthSymbol: string;
        shortSynthName: string;
        shortSynthSymbol: string;
        collateralToken: string;
        financialProductLibrary: string;
        customAncillaryData: BytesLike;
        prepaidProposerReward: BigNumberish;
        optimisticOracleLivenessTime: BigNumberish;
        optimisticOracleProposerBond: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ReserveCurrencyDisputerInterface extends ethers.utils.Interface {
  functions: {
    "swapDispute(address,address,address,uint256,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swapDispute",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapDispute",
    data: BytesLike
  ): Result;

  events: {};
}

export class ReserveCurrencyDisputer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReserveCurrencyDisputerInterface;

  functions: {
    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    swapDispute(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    "swapDispute(address,address,address,uint256,address,uint256,uint256)"(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Any collateral the contract has will be used before anything is purchased on Uniswap.
   * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
   * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
   * @param financialContract address of the financial contract on which the liquidation is occurring.
   * @param liquidationId index of the liquidation for the given sponsor.
   * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
   * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
   * @param sponsor address of the sponsor who's liquidation is disputed.
   * @param uniswapRouter address of the uniswap router used to facilitate trades.
   */
  swapDispute(
    uniswapRouter: string,
    financialContract: string,
    reserveCurrency: string,
    liquidationId: BigNumberish,
    sponsor: string,
    maxReserveTokenSpent: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Any collateral the contract has will be used before anything is purchased on Uniswap.
   * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
   * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
   * @param financialContract address of the financial contract on which the liquidation is occurring.
   * @param liquidationId index of the liquidation for the given sponsor.
   * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
   * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
   * @param sponsor address of the sponsor who's liquidation is disputed.
   * @param uniswapRouter address of the uniswap router used to facilitate trades.
   */
  "swapDispute(address,address,address,uint256,address,uint256,uint256)"(
    uniswapRouter: string,
    financialContract: string,
    reserveCurrency: string,
    liquidationId: BigNumberish,
    sponsor: string,
    maxReserveTokenSpent: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    swapDispute(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    "swapDispute(address,address,address,uint256,address,uint256,uint256)"(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    swapDispute(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    "swapDispute(address,address,address,uint256,address,uint256,uint256)"(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    swapDispute(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    "swapDispute(address,address,address,uint256,address,uint256,uint256)"(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: BigNumberish,
      sponsor: string,
      maxReserveTokenSpent: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

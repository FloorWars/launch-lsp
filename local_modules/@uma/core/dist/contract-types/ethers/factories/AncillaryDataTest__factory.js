"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AncillaryDataTest__factory = void 0;
const ethers_1 = require("ethers");
class AncillaryDataTest__factory extends ethers_1.ContractFactory {
    constructor(signer) {
        super(_abi, _bytecode, signer);
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.AncillaryDataTest__factory = AncillaryDataTest__factory;
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "x",
                type: "address",
            },
        ],
        name: "toUtf8BytesAddress",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "v",
                type: "uint256",
            },
        ],
        name: "toUtf8BytesUint",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "currentAncillaryData",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "key",
                type: "bytes",
            },
            {
                internalType: "address",
                name: "value",
                type: "address",
            },
        ],
        name: "appendKeyValueAddress",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "currentAncillaryData",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "key",
                type: "bytes",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "appendKeyValueUint",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "currentAncillaryData",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "key",
                type: "bytes",
            },
        ],
        name: "constructPrefix",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610a1a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634a47e1251461005c5780634bb0d7b0146100855780637d3b3341146100985780638c2953b7146100ab578063a5dd83ba146100be575b600080fd5b61006f61006a366004610698565b6100d1565b60405161007c919061074c565b60405180910390f35b61006f61009336600461062e565b6100e2565b61006f6100a636600461055c565b6100f7565b61006f6100b93660046105bd565b61010a565b61006f6100cc366004610542565b610117565b60606100dc82610122565b92915050565b60606100ef848484610267565b949350505050565b606061010383836102ad565b9392505050565b60606100ef8484846102ef565b60606100dc82610306565b6060816101465750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610170578061015a81610987565b91506101699050600a836107bc565b915061014a565b60008167ffffffffffffffff81111561019957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156101c3576020820181803683370190505b509050815b851561025e576101d960018261091d565b905060006101e8600a886107bc565b6101f390600a6108dd565b6101fd908861091d565b610208906030610797565b905060008160f81b90508084848151811061023357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610255600a896107bc565b975050506101c8565b50949350505050565b6060600061027585856102ad565b9050848161028285610122565b604051602001610294939291906106b0565b6040516020818303038152906040529150509392505050565b8151606090156102de57816040516020016102c89190610718565b60405160208183030381529060405290506100dc565b816040516020016102c891906106f3565b606060006102fd85856102ad565b90508481610282855b60408051602880825260608281019093526000919060208201818036833701905050905060005b601481101561046257600061034382601361091d565b61034e9060086108dd565b610359906002610835565b61036c906001600160a01b0387166107bc565b60f81b9050600060108260f81c61038391906107d0565b60f81b905060008160f81c601061039a91906108fc565b8360f81c6103a89190610934565b60f81b90506103b682610469565b856103c28660026108dd565b815181106103e057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061040081610469565b8561040c8660026108dd565b61041790600161077f565b8151811061043557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350505050808061045a90610987565b91505061032d565b5092915050565b6000600a60f883901c10156104905761048760f883901c6030610797565b60f81b92915050565b61048760f883901c6057610797565b919050565b80356001600160a01b038116811461049f57600080fd5b600082601f8301126104cb578081fd5b813567ffffffffffffffff808211156104e6576104e66109ce565b604051601f8301601f19908116603f0116810190828211818310171561050e5761050e6109ce565b81604052838152866020858801011115610526578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610553578081fd5b610103826104a4565b6000806040838503121561056e578081fd5b823567ffffffffffffffff80821115610585578283fd5b610591868387016104bb565b935060208501359150808211156105a6578283fd5b506105b3858286016104bb565b9150509250929050565b6000806000606084860312156105d1578081fd5b833567ffffffffffffffff808211156105e8578283fd5b6105f4878388016104bb565b94506020860135915080821115610609578283fd5b50610616868287016104bb565b925050610625604085016104a4565b90509250925092565b600080600060608486031215610642578283fd5b833567ffffffffffffffff80821115610659578485fd5b610665878388016104bb565b9450602086013591508082111561067a578384fd5b50610687868287016104bb565b925050604084013590509250925092565b6000602082840312156106a9578081fd5b5035919050565b600084516106c2818460208901610957565b8451908301906106d6818360208901610957565b84519101906106e9818360208801610957565b0195945050505050565b60008251610705818460208701610957565b601d60f91b920191825250600101919050565b600b60fa1b815260008251610734816001850160208701610957565b601d60f91b6001939091019283015250600201919050565b602081526000825180602084015261076b816040850160208701610957565b601f01601f19169190910160400192915050565b60008219821115610792576107926109a2565b500190565b600060ff821660ff84168060ff038211156107b4576107b46109a2565b019392505050565b6000826107cb576107cb6109b8565b500490565b600060ff8316806107e3576107e36109b8565b8060ff84160491505092915050565b600181815b8085111561082d578160001904821115610813576108136109a2565b8085161561082057918102915b93841c93908002906107f7565b509250929050565b6000610103838360008261084b575060016100dc565b81610858575060006100dc565b816001811461086e576002811461087857610894565b60019150506100dc565b60ff841115610889576108896109a2565b50506001821b6100dc565b5060208310610133831016604e8410600b84101617156108b7575081810a6100dc565b6108c183836107f2565b80600019048211156108d5576108d56109a2565b029392505050565b60008160001904831182151516156108f7576108f76109a2565b500290565b600060ff821660ff84168160ff04811182151516156108d5576108d56109a2565b60008282101561092f5761092f6109a2565b500390565b600060ff821660ff84168082101561094e5761094e6109a2565b90039392505050565b60005b8381101561097257818101518382015260200161095a565b83811115610981576000848401525b50505050565b600060001982141561099b5761099b6109a2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122051a6d3353186b0d7ff77b23a0ab2cc6317896219cb8776768b95a4a314457a0e64736f6c63430008040033";

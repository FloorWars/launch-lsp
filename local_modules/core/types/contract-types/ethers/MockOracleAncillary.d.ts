/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockOracleAncillaryInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentTime()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes)": FunctionFragment;
    "pushPrice(bytes32,uint256,bytes,int256)": FunctionFragment;
    "hasPrice(bytes32,uint256,bytes)": FunctionFragment;
    "getPrice(bytes32,uint256,bytes)": FunctionFragment;
    "getPendingQueries()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pushPrice",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingQueries",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingQueries",
    data: BytesLike
  ): Result;

  events: {
    "PriceRequestAdded(address,bytes32,uint256,bytes)": EventFragment;
    "PushedPrice(address,bytes32,uint256,bytes,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushedPrice"): EventFragment;
}

export class MockOracleAncillary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockOracleAncillaryInterface;

  functions: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pushPrice(bytes32,uint256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingQueries(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string] & {
          identifier: string;
          time: BigNumber;
          ancillaryData: string;
        })[]
      ]
    >;

    "getPendingQueries()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, string] & {
          identifier: string;
          time: BigNumber;
          ancillaryData: string;
        })[]
      ]
    >;
  };

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Time must be in the past and the identifier must be supported.
   * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
   * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
   * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
   * @param time unix timestamp for the price request.
   */
  requestPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Time must be in the past and the identifier must be supported.
   * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
   * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
   * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
   * @param time unix timestamp for the price request.
   */
  "requestPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pushPrice(bytes32,uint256,bytes,int256)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Time must be in the past and the identifier must be supported.
   * Whether the price for `identifier` and `time` is available.
   * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
   * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
   * @param time unix timestamp for the price request.
   */
  hasPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Time must be in the past and the identifier must be supported.
   * Whether the price for `identifier` and `time` is available.
   * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
   * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
   * @param time unix timestamp for the price request.
   */
  "hasPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * If the price is not available, the method reverts.
   * Gets the price for `identifier` and `time` if it has already been requested and resolved.
   * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
   * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
   * @param time unix timestamp for the price request.
   */
  getPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * If the price is not available, the method reverts.
   * Gets the price for `identifier` and `time` if it has already been requested and resolved.
   * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
   * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
   * @param time unix timestamp for the price request.
   */
  "getPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingQueries(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string] & {
      identifier: string;
      time: BigNumber;
      ancillaryData: string;
    })[]
  >;

  "getPendingQueries()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, string] & {
      identifier: string;
      time: BigNumber;
      ancillaryData: string;
    })[]
  >;

  callStatic: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pushPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pushPrice(bytes32,uint256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingQueries(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string] & {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      })[]
    >;

    "getPendingQueries()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, string] & {
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      })[]
    >;
  };

  filters: {
    PriceRequestAdded(
      requester: string | null,
      identifier: BytesLike | null,
      time: null,
      ancillaryData: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        requester: string;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    PushedPrice(
      pusher: string | null,
      identifier: BytesLike | null,
      time: null,
      ancillaryData: null,
      price: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        pusher: string;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pushPrice(bytes32,uint256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingQueries(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingQueries()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pushPrice(bytes32,uint256,bytes,int256)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Time must be in the past and the identifier must be supported.
     * Whether the price for `identifier` and `time` is available.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * If the price is not available, the method reverts.
     * Gets the price for `identifier` and `time` if it has already been requested and resolved.
     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.
     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.
     * @param time unix timestamp for the price request.
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingQueries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPendingQueries()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

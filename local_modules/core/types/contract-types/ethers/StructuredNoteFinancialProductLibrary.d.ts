/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StructuredNoteFinancialProductLibraryInterface
  extends ethers.utils.Interface {
  functions: {
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transformPriceIdentifier(bytes32,uint256)": FunctionFragment;
    "setFinancialProductStrike(address,tuple)": FunctionFragment;
    "getStrikeForFinancialProduct(address)": FunctionFragment;
    "transformPrice(tuple,uint256)": FunctionFragment;
    "transformCollateralRequirement(tuple,tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transformPriceIdentifier",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFinancialProductStrike",
    values: [string, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrikeForFinancialProduct",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transformPrice",
    values: [{ rawValue: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transformCollateralRequirement",
    values: [{ rawValue: BigNumberish }, { rawValue: BigNumberish }]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformPriceIdentifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFinancialProductStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrikeForFinancialProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformCollateralRequirement",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class StructuredNoteFinancialProductLibrary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StructuredNoteFinancialProductLibraryInterface;

  functions: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    "transformPriceIdentifier(bytes32,uint256)"(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setFinancialProductStrike(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFinancialProductStrike(address,(uint256))"(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    getStrikeForFinancialProduct(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    "getStrikeForFinancialProduct(address)"(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    "transformPrice((uint256),uint256)"(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    transformCollateralRequirement(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    "transformCollateralRequirement((uint256),(uint256))"(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transforms a given price identifier using the financial product libraries transformation logic.
   * @param priceIdentifier input price identifier defined for the financial contract.
   * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
   */
  transformPriceIdentifier(
    priceIdentifier: BytesLike,
    requestTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Transforms a given price identifier using the financial product libraries transformation logic.
   * @param priceIdentifier input price identifier defined for the financial contract.
   * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
   */
  "transformPriceIdentifier(bytes32,uint256)"(
    priceIdentifier: BytesLike,
    requestTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setFinancialProductStrike(
    financialProduct: string,
    strikePrice: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFinancialProductStrike(address,(uint256))"(
    financialProduct: string,
    strikePrice: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the strike price associated with a given financial product address.
   * @param financialProduct address of the financial product.
   */
  getStrikeForFinancialProduct(
    financialProduct: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * Returns the strike price associated with a given financial product address.
   * @param financialProduct address of the financial product.
   */
  "getStrikeForFinancialProduct(address)"(
    financialProduct: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  transformPrice(
    oraclePrice: { rawValue: BigNumberish },
    requestTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  "transformPrice((uint256),uint256)"(
    oraclePrice: { rawValue: BigNumberish },
    requestTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  transformCollateralRequirement(
    oraclePrice: { rawValue: BigNumberish },
    collateralRequirement: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  "transformCollateralRequirement((uint256),(uint256))"(
    oraclePrice: { rawValue: BigNumberish },
    collateralRequirement: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  callStatic: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    "transformPriceIdentifier(bytes32,uint256)"(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setFinancialProductStrike(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setFinancialProductStrike(address,(uint256))"(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    getStrikeForFinancialProduct(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    "getStrikeForFinancialProduct(address)"(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "transformPrice((uint256),uint256)"(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    transformCollateralRequirement(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "transformCollateralRequirement((uint256),(uint256))"(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    "transformPriceIdentifier(bytes32,uint256)"(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFinancialProductStrike(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFinancialProductStrike(address,(uint256))"(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    getStrikeForFinancialProduct(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    "getStrikeForFinancialProduct(address)"(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transformPrice((uint256),uint256)"(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transformCollateralRequirement(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transformCollateralRequirement((uint256),(uint256))"(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    transformPriceIdentifier(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transforms a given price identifier using the financial product libraries transformation logic.
     * @param priceIdentifier input price identifier defined for the financial contract.
     * @param requestTime timestamp the identifier is to be used at. EG the time that a price request would be sent using this identifier.
     */
    "transformPriceIdentifier(bytes32,uint256)"(
      priceIdentifier: BytesLike,
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFinancialProductStrike(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFinancialProductStrike(address,(uint256))"(
      financialProduct: string,
      strikePrice: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    getStrikeForFinancialProduct(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the strike price associated with a given financial product address.
     * @param financialProduct address of the financial product.
     */
    "getStrikeForFinancialProduct(address)"(
      financialProduct: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transformPrice(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transformPrice((uint256),uint256)"(
      oraclePrice: { rawValue: BigNumberish },
      requestTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transformCollateralRequirement(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transformCollateralRequirement((uint256),(uint256))"(
      oraclePrice: { rawValue: BigNumberish },
      collateralRequirement: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

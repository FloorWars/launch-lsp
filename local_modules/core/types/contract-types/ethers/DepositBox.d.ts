/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DepositBoxInterface extends ethers.utils.Interface {
  functions: {
    "collateralCurrency()": FunctionFragment;
    "cumulativeFeeMultiplier()": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getOutstandingRegularFees(uint256)": FunctionFragment;
    "gulp()": FunctionFragment;
    "payRegularFees()": FunctionFragment;
    "pfc()": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "initialize()": FunctionFragment;
    "deposit(tuple)": FunctionFragment;
    "requestWithdrawal(tuple)": FunctionFragment;
    "executeWithdrawal()": FunctionFragment;
    "cancelWithdrawal()": FunctionFragment;
    "emergencyShutdown()": FunctionFragment;
    "remargin()": FunctionFragment;
    "getCollateral(address)": FunctionFragment;
    "totalDepositBoxCollateral()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutstandingRegularFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gulp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payRegularFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pfc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCurrentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [{ rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "remargin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositBoxCollateral",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutstandingRegularFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gulp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payRegularFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pfc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositBoxCollateral",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "EndedDepositBox(address)": EventFragment;
    "FinalFeesPaid(uint256)": EventFragment;
    "NewDepositBox(address)": EventFragment;
    "RegularFeesPaid(uint256,uint256)": EventFragment;
    "RequestWithdrawal(address,uint256,uint256)": EventFragment;
    "RequestWithdrawalCanceled(address,uint256,uint256)": EventFragment;
    "RequestWithdrawalExecuted(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndedDepositBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinalFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDepositBox"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegularFeesPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawalExecuted"): EventFragment;
}

export class DepositBox extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DepositBoxInterface;

  functions: {
    collateralCurrency(overrides?: CallOverrides): Promise<[string]>;

    "collateralCurrency()"(overrides?: CallOverrides): Promise<[string]>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    "cumulativeFeeMultiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
        totalPaid: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    "getOutstandingRegularFees(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
        totalPaid: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    gulp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    "gulp()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    "payRegularFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    pfc(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    "pfc()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    "timerAddress()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestWithdrawal((uint256))"(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    executeWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    "executeWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Cancels a pending withdrawal request.
     */
    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Cancels a pending withdrawal request.
     */
    "cancelWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    "emergencyShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    remargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    "remargin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    getCollateral(
      user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    "getCollateral(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    totalDepositBoxCollateral(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    "totalDepositBoxCollateral()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;
  };

  collateralCurrency(overrides?: CallOverrides): Promise<string>;

  "collateralCurrency()"(overrides?: CallOverrides): Promise<string>;

  cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "cumulativeFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
   * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
   */
  getOutstandingRegularFees(
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      regularFee: [BigNumber] & { rawValue: BigNumber };
      latePenalty: [BigNumber] & { rawValue: BigNumber };
      totalPaid: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  /**
   * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
   * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
   */
  "getOutstandingRegularFees(uint256)"(
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      regularFee: [BigNumber] & { rawValue: BigNumber };
      latePenalty: [BigNumber] & { rawValue: BigNumber };
      totalPaid: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  /**
   * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
   * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
   */
  gulp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
   * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
   */
  "gulp()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
   * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
   */
  payRegularFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
   * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
   */
  "payRegularFees()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
   * Gets the current profit from corruption for this contract in terms of the collateral currency.
   */
  pfc(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
   * Gets the current profit from corruption for this contract in terms of the collateral currency.
   */
  "pfc()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  "setCurrentTime(uint256)"(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  "timerAddress()"(overrides?: CallOverrides): Promise<string>;

  /**
   * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
   * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
   */
  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
   * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
   */
  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit((uint256))"(
    collateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    denominatedCollateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestWithdrawal((uint256))"(
    denominatedCollateralAmount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
   * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
   */
  executeWithdrawal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
   * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
   */
  "executeWithdrawal()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Cancels a pending withdrawal request.
   */
  cancelWithdrawal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Cancels a pending withdrawal request.
   */
  "cancelWithdrawal()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
   */
  emergencyShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
   */
  "emergencyShutdown()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
   */
  remargin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
   */
  "remargin()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
   * Accessor method for a user's collateral.
   * @param user address whose collateral amount is retrieved.
   */
  getCollateral(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
   * Accessor method for a user's collateral.
   * @param user address whose collateral amount is retrieved.
   */
  "getCollateral(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * Accessor method for the total collateral stored within the entire contract.
   */
  totalDepositBoxCollateral(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * Accessor method for the total collateral stored within the entire contract.
   */
  "totalDepositBoxCollateral()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  callStatic: {
    collateralCurrency(overrides?: CallOverrides): Promise<string>;

    "collateralCurrency()"(overrides?: CallOverrides): Promise<string>;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
        totalPaid: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    "getOutstandingRegularFees(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
        totalPaid: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    gulp(overrides?: CallOverrides): Promise<void>;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    "gulp()"(overrides?: CallOverrides): Promise<void>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    payRegularFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    "payRegularFees()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    pfc(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    "pfc()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    "timerAddress()"(overrides?: CallOverrides): Promise<string>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    initialize(overrides?: CallOverrides): Promise<void>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    "initialize()"(overrides?: CallOverrides): Promise<void>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawal(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "requestWithdrawal((uint256))"(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    executeWithdrawal(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    "executeWithdrawal()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Cancels a pending withdrawal request.
     */
    cancelWithdrawal(overrides?: CallOverrides): Promise<void>;

    /**
     * Cancels a pending withdrawal request.
     */
    "cancelWithdrawal()"(overrides?: CallOverrides): Promise<void>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    emergencyShutdown(overrides?: CallOverrides): Promise<void>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    "emergencyShutdown()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    remargin(overrides?: CallOverrides): Promise<void>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    "remargin()"(overrides?: CallOverrides): Promise<void>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    getCollateral(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    "getCollateral(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    totalDepositBoxCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    "totalDepositBoxCollateral()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;
  };

  filters: {
    Deposit(
      user: string | null,
      collateralAmount: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; collateralAmount: BigNumber }
    >;

    EndedDepositBox(
      user: string | null
    ): TypedEventFilter<[string], { user: string }>;

    FinalFeesPaid(
      amount: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    NewDepositBox(
      user: string | null
    ): TypedEventFilter<[string], { user: string }>;

    RegularFeesPaid(
      regularFee: BigNumberish | null,
      lateFee: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { regularFee: BigNumber; lateFee: BigNumber }
    >;

    RequestWithdrawal(
      user: string | null,
      collateralAmount: BigNumberish | null,
      requestPassTimestamp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        user: string;
        collateralAmount: BigNumber;
        requestPassTimestamp: BigNumber;
      }
    >;

    RequestWithdrawalCanceled(
      user: string | null,
      collateralAmount: BigNumberish | null,
      requestPassTimestamp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        user: string;
        collateralAmount: BigNumber;
        requestPassTimestamp: BigNumber;
      }
    >;

    RequestWithdrawalExecuted(
      user: string | null,
      collateralAmount: BigNumberish | null,
      exchangeRate: null,
      requestPassTimestamp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        collateralAmount: BigNumber;
        exchangeRate: BigNumber;
        requestPassTimestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    collateralCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    "collateralCurrency()"(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "cumulativeFeeMultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    "getOutstandingRegularFees(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    gulp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    "gulp()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    "payRegularFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    pfc(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    "pfc()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "timerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestWithdrawal((uint256))"(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    executeWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    "executeWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Cancels a pending withdrawal request.
     */
    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Cancels a pending withdrawal request.
     */
    "cancelWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    "emergencyShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    remargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    "remargin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    getCollateral(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    "getCollateral(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    totalDepositBoxCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    "totalDepositBoxCollateral()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralCurrency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralCurrency()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cumulativeFeeMultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    "getCurrentTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    getOutstandingRegularFees(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.
     * Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more than the total collateral within the contract then the totalPaid returned is full contract collateral amount.
     */
    "getOutstandingRegularFees(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    gulp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively pays all sponsors a pro-rata portion of the excess collateral.This will revert if PfC is 0 and this contract's collateral balance > 0.
     * Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.
     */
    "gulp()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    payRegularFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * These must be paid periodically for the life of the contract. If the contract has not paid its regular fee in a week or more then a late penalty is applied which is sent to the caller. If the amount of fees owed are greater than the pfc, then this will pay as much as possible from the available collateral. An event is only fired if the fees charged are greater than 0.
     * Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.
     */
    "payRegularFees()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    pfc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.
     * Gets the current profit from corruption for this contract in terms of the collateral currency.
     */
    "pfc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    "setCurrentTime(uint256)"(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timerAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This contract must hold the `ContractCreator` role with the Registry in order to register itself as a financial-template with the DVM. Note that `_registerContract` cannot be called from the constructor because this contract first needs to be given the `ContractCreator` role in order to register with the `Registry`. But, its address is not known until after deployment.
     * This should be called after construction of the DepositBox and handles registration with the Registry, which is required to make price requests in production environments.
     */
    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit((uint256))"(
      collateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestWithdrawal((uint256))"(
      denominatedCollateralAmount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    executeWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Might not withdraw the full requested amount in order to account for precision loss or if the full requested amount exceeds the collateral in the position (due to paying fees).
     * After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and subsequent DVM price resolution), withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.
     */
    "executeWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Cancels a pending withdrawal request.
     */
    cancelWithdrawal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Cancels a pending withdrawal request.
     */
    "cancelWithdrawal()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    emergencyShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * `emergencyShutdown` and `remargin` are required to be implemented by all financial contracts and exposed to the DVM, but because this is a minimal demo they will simply exit silently.
     */
    "emergencyShutdown()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    remargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Same comment as `emergencyShutdown`. For the sake of simplicity, this will simply exit silently.
     */
    "remargin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    getCollateral(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This is necessary because the struct returned by the depositBoxes() method shows rawCollateral, which isn't a user-readable value.
     * Accessor method for a user's collateral.
     * @param user address whose collateral amount is retrieved.
     */
    "getCollateral(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    totalDepositBoxCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Accessor method for the total collateral stored within the entire contract.
     */
    "totalDepositBoxCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

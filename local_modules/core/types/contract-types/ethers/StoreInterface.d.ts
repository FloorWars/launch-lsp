/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StoreInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "payOracleFees()": FunctionFragment;
    "payOracleFeesErc20(address,tuple)": FunctionFragment;
    "computeRegularFee(uint256,uint256,tuple)": FunctionFragment;
    "computeFinalFee(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "payOracleFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payOracleFeesErc20",
    values: [string, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRegularFee",
    values: [BigNumberish, BigNumberish, { rawValue: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "computeFinalFee",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "payOracleFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payOracleFeesErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRegularFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeFinalFee",
    data: BytesLike
  ): Result;

  events: {};
}

export class StoreInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StoreInterfaceInterface;

  functions: {
    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    payOracleFees(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    "payOracleFees()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "payOracleFeesErc20(address,(uint256))"(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "computeRegularFee(uint256,uint256,(uint256))"(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    "computeFinalFee(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { rawValue: BigNumber }]>;
  };

  /**
   * To be used by contracts whose margin currency is ETH.
   * Pays Oracle fees in ETH to the store.
   */
  payOracleFees(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * To be used by contracts whose margin currency is ETH.
   * Pays Oracle fees in ETH to the store.
   */
  "payOracleFees()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payOracleFeesErc20(
    erc20Address: string,
    amount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "payOracleFeesErc20(address,(uint256))"(
    erc20Address: string,
    amount: { rawValue: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeRegularFee(
    startTime: BigNumberish,
    endTime: BigNumberish,
    pfc: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      regularFee: [BigNumber] & { rawValue: BigNumber };
      latePenalty: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  "computeRegularFee(uint256,uint256,(uint256))"(
    startTime: BigNumberish,
    endTime: BigNumberish,
    pfc: { rawValue: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { rawValue: BigNumber },
      [BigNumber] & { rawValue: BigNumber }
    ] & {
      regularFee: [BigNumber] & { rawValue: BigNumber };
      latePenalty: [BigNumber] & { rawValue: BigNumber };
    }
  >;

  /**
   * Computes the final oracle fees that a contract should pay at settlement.
   * @param currency token used to pay the final fee.
   */
  computeFinalFee(
    currency: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  /**
   * Computes the final oracle fees that a contract should pay at settlement.
   * @param currency token used to pay the final fee.
   */
  "computeFinalFee(address)"(
    currency: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { rawValue: BigNumber }>;

  callStatic: {
    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    payOracleFees(overrides?: CallOverrides): Promise<void>;

    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    "payOracleFees()"(overrides?: CallOverrides): Promise<void>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "payOracleFeesErc20(address,(uint256))"(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    "computeRegularFee(uint256,uint256,(uint256))"(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { rawValue: BigNumber },
        [BigNumber] & { rawValue: BigNumber }
      ] & {
        regularFee: [BigNumber] & { rawValue: BigNumber };
        latePenalty: [BigNumber] & { rawValue: BigNumber };
      }
    >;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    "computeFinalFee(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rawValue: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    payOracleFees(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    "payOracleFees()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "payOracleFeesErc20(address,(uint256))"(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeRegularFee(uint256,uint256,(uint256))"(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    "computeFinalFee(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    payOracleFees(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    "payOracleFees()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payOracleFeesErc20(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "payOracleFeesErc20(address,(uint256))"(
      erc20Address: string,
      amount: { rawValue: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeRegularFee(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeRegularFee(uint256,uint256,(uint256))"(
      startTime: BigNumberish,
      endTime: BigNumberish,
      pfc: { rawValue: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    computeFinalFee(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    "computeFinalFee(address)"(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

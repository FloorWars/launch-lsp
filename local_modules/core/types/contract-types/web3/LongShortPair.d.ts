/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractExpired = ContractEventLog<{
  caller: string;
  0: string;
}>;
export type PositionSettled = ContractEventLog<{
  sponsor: string;
  collateralReturned: string;
  longTokens: string;
  shortTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type TokensCreated = ContractEventLog<{
  sponsor: string;
  collateralUsed: string;
  tokensMinted: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokensRedeemed = ContractEventLog<{
  sponsor: string;
  collateralReturned: string;
  tokensRedeemed: string;
  0: string;
  1: string;
  2: string;
}>;

export interface LongShortPair extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LongShortPair;
  clone(): LongShortPair;
  methods: {
    collateralPerPair(): NonPayableTransactionObject<string>;

    collateralToken(): NonPayableTransactionObject<string>;

    contractState(): NonPayableTransactionObject<string>;

    customAncillaryData(): NonPayableTransactionObject<string>;

    expirationTimestamp(): NonPayableTransactionObject<string>;

    expiryPercentLong(): NonPayableTransactionObject<string>;

    expiryPrice(): NonPayableTransactionObject<string>;

    financialProductLibrary(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(): NonPayableTransactionObject<string>;

    longToken(): NonPayableTransactionObject<string>;

    optimisticOracleLivenessTime(): NonPayableTransactionObject<string>;

    optimisticOracleProposerBond(): NonPayableTransactionObject<string>;

    pairName(): NonPayableTransactionObject<string>;

    prepaidProposerReward(): NonPayableTransactionObject<string>;

    priceIdentifier(): NonPayableTransactionObject<string>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime(
      time: number | string | BN
    ): NonPayableTransactionObject<void>;

    shortToken(): NonPayableTransactionObject<string>;

    timerAddress(): NonPayableTransactionObject<string>;

    /**
     * The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.
     * Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral amount into this contract, defined by the collateralPerPair value.
     * @param tokensToCreate number of long and short synthetic tokens to create.
     */
    create(
      tokensToCreate: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.
     * @param tokensToRedeem number of long and short synthetic tokens to redeem.
     */
    redeem(
      tokensToRedeem: number | string | BN
    ): NonPayableTransactionObject<string>;

    /**
     * Uses financialProductLibrary to compute the redemption rate between long and short tokens.This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long and short tokens are burned, rather than transferred, from the caller.
     * Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.
     * @param longTokensToRedeem number of long tokens to settle.
     * @param shortTokensToRedeem number of short tokens to settle.
     */
    settle(
      longTokensToRedeem: number | string | BN,
      shortTokensToRedeem: number | string | BN
    ): NonPayableTransactionObject<string>;

    expire(): NonPayableTransactionObject<void>;

    /**
     * Returns the number of long and short tokens a sponsor wallet holds.
     * @param sponsor address of the sponsor to query.
     */
    getPositionTokens(
      sponsor: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;
  };
  events: {
    ContractExpired(cb?: Callback<ContractExpired>): EventEmitter;
    ContractExpired(
      options?: EventOptions,
      cb?: Callback<ContractExpired>
    ): EventEmitter;

    PositionSettled(cb?: Callback<PositionSettled>): EventEmitter;
    PositionSettled(
      options?: EventOptions,
      cb?: Callback<PositionSettled>
    ): EventEmitter;

    TokensCreated(cb?: Callback<TokensCreated>): EventEmitter;
    TokensCreated(
      options?: EventOptions,
      cb?: Callback<TokensCreated>
    ): EventEmitter;

    TokensRedeemed(cb?: Callback<TokensRedeemed>): EventEmitter;
    TokensRedeemed(
      options?: EventOptions,
      cb?: Callback<TokensRedeemed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ContractExpired", cb: Callback<ContractExpired>): void;
  once(
    event: "ContractExpired",
    options: EventOptions,
    cb: Callback<ContractExpired>
  ): void;

  once(event: "PositionSettled", cb: Callback<PositionSettled>): void;
  once(
    event: "PositionSettled",
    options: EventOptions,
    cb: Callback<PositionSettled>
  ): void;

  once(event: "TokensCreated", cb: Callback<TokensCreated>): void;
  once(
    event: "TokensCreated",
    options: EventOptions,
    cb: Callback<TokensCreated>
  ): void;

  once(event: "TokensRedeemed", cb: Callback<TokensRedeemed>): void;
  once(
    event: "TokensRedeemed",
    options: EventOptions,
    cb: Callback<TokensRedeemed>
  ): void;
}

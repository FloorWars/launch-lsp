/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ReserveCurrencyDisputer extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ReserveCurrencyDisputer;
  clone(): ReserveCurrencyDisputer;
  methods: {
    /**
     * Any collateral the contract has will be used before anything is purchased on Uniswap.
     * Swaps required amount of reserve currency to collateral currency which is then used to dispute a liquidation.
     * @param deadline abort the trade and dispute if the transaction is mined after this timestamp.*
     * @param financialContract address of the financial contract on which the liquidation is occurring.
     * @param liquidationId index of the liquidation for the given sponsor.
     * @param maxReserveTokenSpent maximum number of reserve tokens to spend in the trade. Bounds slippage.
     * @param reserveCurrency address of the token to swap for collateral. This is the common currency held by the DSProxy.
     * @param sponsor address of the sponsor who's liquidation is disputed.
     * @param uniswapRouter address of the uniswap router used to facilitate trades.
     */
    swapDispute(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidationId: number | string | BN,
      sponsor: string,
      maxReserveTokenSpent: number | string | BN,
      deadline: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

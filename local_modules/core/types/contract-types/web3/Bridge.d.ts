/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  destinationChainID: string;
  resourceID: string;
  depositNonce: string;
  0: string;
  1: string;
  2: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type ProposalEvent = ContractEventLog<{
  originChainID: string;
  depositNonce: string;
  status: string;
  resourceID: string;
  dataHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type ProposalVote = ContractEventLog<{
  originChainID: string;
  depositNonce: string;
  status: string;
  resourceID: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RelayerAdded = ContractEventLog<{
  relayer: string;
  0: string;
}>;
export type RelayerRemoved = ContractEventLog<{
  relayer: string;
  0: string;
}>;
export type RelayerThresholdChanged = ContractEventLog<{
  newThreshold: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface Bridge extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Bridge;
  clone(): Bridge;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    RELAYER_ROLE(): NonPayableTransactionObject<string>;

    _chainID(): NonPayableTransactionObject<string>;

    _depositCounts(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    _depositRecords(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    _expiry(): NonPayableTransactionObject<string>;

    _fee(): NonPayableTransactionObject<string>;

    _hasVotedOnProposal(
      arg0: number | string | BN,
      arg1: string | number[],
      arg2: string
    ): NonPayableTransactionObject<boolean>;

    _proposals(
      arg0: number | string | BN,
      arg1: string | number[]
    ): NonPayableTransactionObject<{
      _resourceID: string;
      _dataHash: string;
      _status: string;
      _proposedBlock: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    _relayerThreshold(): NonPayableTransactionObject<string>;

    _resourceIDToHandlerAddress(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    _totalProposals(): NonPayableTransactionObject<string>;

    _totalRelayers(): NonPayableTransactionObject<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(): NonPayableTransactionObject<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(relayer: string): NonPayableTransactionObject<boolean>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(newAdmin: string): NonPayableTransactionObject<void>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(): NonPayableTransactionObject<void>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(): NonPayableTransactionObject<void>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(relayerAddress: string): NonPayableTransactionObject<void>;

    /**
     * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: string,
      resourceID: string | number[],
      tokenAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: string,
      resourceID: string | number[],
      contractAddress: string,
      depositFunctionSig: string | number[],
      executeFunctionSig: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: string,
      tokenAddress: string
    ): NonPayableTransactionObject<void>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: number | string | BN,
      depositNonce: number | string | BN,
      dataHash: string | number[]
    ): NonPayableTransactionObject<
      [string, string, string[], string[], string, string]
    >;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: number | string | BN,
      resourceID: string | number[],
      data: string | number[]
    ): PayableTransactionObject<void>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: number | string | BN,
      depositNonce: number | string | BN,
      resourceID: string | number[],
      dataHash: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: number | string | BN,
      depositNonce: number | string | BN,
      dataHash: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: number | string | BN,
      depositNonce: number | string | BN,
      data: string | number[],
      resourceID: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: string[],
      amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    ProposalEvent(cb?: Callback<ProposalEvent>): EventEmitter;
    ProposalEvent(
      options?: EventOptions,
      cb?: Callback<ProposalEvent>
    ): EventEmitter;

    ProposalVote(cb?: Callback<ProposalVote>): EventEmitter;
    ProposalVote(
      options?: EventOptions,
      cb?: Callback<ProposalVote>
    ): EventEmitter;

    RelayerAdded(cb?: Callback<RelayerAdded>): EventEmitter;
    RelayerAdded(
      options?: EventOptions,
      cb?: Callback<RelayerAdded>
    ): EventEmitter;

    RelayerRemoved(cb?: Callback<RelayerRemoved>): EventEmitter;
    RelayerRemoved(
      options?: EventOptions,
      cb?: Callback<RelayerRemoved>
    ): EventEmitter;

    RelayerThresholdChanged(
      cb?: Callback<RelayerThresholdChanged>
    ): EventEmitter;
    RelayerThresholdChanged(
      options?: EventOptions,
      cb?: Callback<RelayerThresholdChanged>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "ProposalEvent", cb: Callback<ProposalEvent>): void;
  once(
    event: "ProposalEvent",
    options: EventOptions,
    cb: Callback<ProposalEvent>
  ): void;

  once(event: "ProposalVote", cb: Callback<ProposalVote>): void;
  once(
    event: "ProposalVote",
    options: EventOptions,
    cb: Callback<ProposalVote>
  ): void;

  once(event: "RelayerAdded", cb: Callback<RelayerAdded>): void;
  once(
    event: "RelayerAdded",
    options: EventOptions,
    cb: Callback<RelayerAdded>
  ): void;

  once(event: "RelayerRemoved", cb: Callback<RelayerRemoved>): void;
  once(
    event: "RelayerRemoved",
    options: EventOptions,
    cb: Callback<RelayerRemoved>
  ): void;

  once(
    event: "RelayerThresholdChanged",
    cb: Callback<RelayerThresholdChanged>
  ): void;
  once(
    event: "RelayerThresholdChanged",
    options: EventOptions,
    cb: Callback<RelayerThresholdChanged>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}

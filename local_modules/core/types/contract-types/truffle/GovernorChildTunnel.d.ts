/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface GovernorChildTunnelContract
  extends Truffle.Contract<GovernorChildTunnelInstance> {
  "new"(
    _fxChild: string,
    meta?: Truffle.TransactionDetails
  ): Promise<GovernorChildTunnelInstance>;
}

export interface ExecutedGovernanceTransaction {
  name: "ExecutedGovernanceTransaction";
  args: {
    to: string;
    data: string;
    0: string;
    1: string;
  };
}

export interface MessageSent {
  name: "MessageSent";
  args: {
    message: string;
    0: string;
  };
}

type AllEvents = ExecutedGovernanceTransaction | MessageSent;

export interface GovernorChildTunnelInstance extends Truffle.ContractInstance {
  fxChild(txDetails?: Truffle.TransactionDetails): Promise<string>;

  fxRootTunnel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  processMessageFromRoot: {
    (
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFxRootTunnel: {
    (_fxRootTunnel: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _fxRootTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fxRootTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fxRootTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    fxChild(txDetails?: Truffle.TransactionDetails): Promise<string>;

    fxRootTunnel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    processMessageFromRoot: {
      (
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFxRootTunnel: {
      (_fxRootTunnel: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _fxRootTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fxRootTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fxRootTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

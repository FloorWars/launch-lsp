/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OracleChildTunnelContract
  extends Truffle.Contract<OracleChildTunnelInstance> {
  "new"(
    _fxChild: string,
    _finderAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<OracleChildTunnelInstance>;
}

export interface MessageSent {
  name: "MessageSent";
  args: {
    message: string;
    0: string;
  };
}

export interface PriceRequestAdded {
  name: "PriceRequestAdded";
  args: {
    identifier: string;
    time: BN;
    ancillaryData: string;
    requestHash: string;
    0: string;
    1: BN;
    2: string;
    3: string;
  };
}

export interface PushedPrice {
  name: "PushedPrice";
  args: {
    identifier: string;
    time: BN;
    ancillaryData: string;
    price: BN;
    requestHash: string;
    0: string;
    1: BN;
    2: string;
    3: BN;
    4: string;
  };
}

type AllEvents = MessageSent | PriceRequestAdded | PushedPrice;

export interface OracleChildTunnelInstance extends Truffle.ContractInstance {
  ancillaryBytesLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  fxChild(txDetails?: Truffle.TransactionDetails): Promise<string>;

  fxRootTunnel(txDetails?: Truffle.TransactionDetails): Promise<string>;

  processMessageFromRoot: {
    (
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      stateId: number | BN | string,
      rootMessageSender: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setFxRootTunnel: {
    (_fxRootTunnel: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _fxRootTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fxRootTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fxRootTunnel: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Can be called only by a registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the price resolution data from mainnet. Emits a message that will be included in regular checkpoint of all sidechain transactions to mainnet.
   * This should be called to bridge a price request to mainnet.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request.
   */
  requestPrice: {
    (
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns whether a price has resolved for the request.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request
   */
  hasPrice(
    identifier: string,
    time: number | BN | string,
    ancillaryData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Reverts if price is not available.
   * Returns resolved price for the request.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request
   */
  getPrice(
    identifier: string,
    time: number | BN | string,
    ancillaryData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Generates stamped ancillary data in the format that it would be used in the case of a price request.
   * @param ancillaryData ancillary data of the price being requested.
   * @param requester sender of the initial price request.
   */
  stampAncillaryData(
    ancillaryData: string,
    requester: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    ancillaryBytesLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    fxChild(txDetails?: Truffle.TransactionDetails): Promise<string>;

    fxRootTunnel(txDetails?: Truffle.TransactionDetails): Promise<string>;

    processMessageFromRoot: {
      (
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        stateId: number | BN | string,
        rootMessageSender: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setFxRootTunnel: {
      (_fxRootTunnel: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _fxRootTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fxRootTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fxRootTunnel: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Can be called only by a registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the price resolution data from mainnet. Emits a message that will be included in regular checkpoint of all sidechain transactions to mainnet.
     * This should be called to bridge a price request to mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    requestPrice: {
      (
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    hasPrice(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    getPrice(
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Generates stamped ancillary data in the format that it would be used in the case of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param requester sender of the initial price request.
     */
    stampAncillaryData(
      ancillaryData: string,
      requester: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StoreInterfaceContract
  extends Truffle.Contract<StoreInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StoreInterfaceInstance>;
}

type AllEvents = never;

export interface StoreInterfaceInstance extends Truffle.ContractInstance {
  /**
   * To be used by contracts whose margin currency is ETH.
   * Pays Oracle fees in ETH to the store.
   */
  payOracleFees: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  payOracleFeesErc20: {
    (
      erc20Address: string,
      amount: { rawValue: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      erc20Address: string,
      amount: { rawValue: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      erc20Address: string,
      amount: { rawValue: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      erc20Address: string,
      amount: { rawValue: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  computeRegularFee(
    startTime: number | BN | string,
    endTime: number | BN | string,
    pfc: { rawValue: number | BN | string },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: { rawValue: BN }; 1: { rawValue: BN } }>;

  /**
   * Computes the final oracle fees that a contract should pay at settlement.
   * @param currency token used to pay the final fee.
   */
  computeFinalFee(
    currency: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ rawValue: BN }>;

  methods: {
    /**
     * To be used by contracts whose margin currency is ETH.
     * Pays Oracle fees in ETH to the store.
     */
    payOracleFees: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    payOracleFeesErc20: {
      (
        erc20Address: string,
        amount: { rawValue: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        erc20Address: string,
        amount: { rawValue: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        erc20Address: string,
        amount: { rawValue: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        erc20Address: string,
        amount: { rawValue: number | BN | string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    computeRegularFee(
      startTime: number | BN | string,
      endTime: number | BN | string,
      pfc: { rawValue: number | BN | string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: { rawValue: BN }; 1: { rawValue: BN } }>;

    /**
     * Computes the final oracle fees that a contract should pay at settlement.
     * @param currency token used to pay the final fee.
     */
    computeFinalFee(
      currency: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ rawValue: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

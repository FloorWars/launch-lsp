/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SourceOracleContract
  extends Truffle.Contract<SourceOracleInstance> {
  "new"(
    _finderAddress: string,
    _chainID: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<SourceOracleInstance>;
}

export interface PriceRequestAdded {
  name: "PriceRequestAdded";
  args: {
    chainID: BN;
    identifier: string;
    time: BN;
    ancillaryData: string;
    0: BN;
    1: string;
    2: BN;
    3: string;
  };
}

export interface PushedPrice {
  name: "PushedPrice";
  args: {
    chainID: BN;
    identifier: string;
    time: BN;
    ancillaryData: string;
    price: BN;
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: BN;
  };
}

type AllEvents = PriceRequestAdded | PushedPrice;

export interface SourceOracleInstance extends Truffle.ContractInstance {
  currentChainID(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
   * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
   * @param time Timestamp of price request to resolve.
   */
  publishPrice: {
    (
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
   * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param price Price resolved on DVM to send to SinkOracle.
   * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
   * @param time Timestamp of price request to resolve.
   */
  validateDeposit: {
    (
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
   * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
   * @param time Timestamp of price request.
   */
  executeRequestPrice: {
    (
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sinkChainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
   */
  getResourceId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
   * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
   * @param ancillaryData extra data of price request to publish.
   * @param chainID Chain ID of SinkOracle to publish price to.
   * @param identifier Identifier of price request to publish.
   * @param time Timestamp of price request to publish.
   */
  formatMetadata(
    chainID: number | BN | string,
    identifier: string,
    time: number | BN | string,
    ancillaryData: string,
    price: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    currentChainID(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice: {
      (
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    validateDeposit: {
      (
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    executeRequestPrice: {
      (
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sinkChainID: number | BN | string,
        identifier: string,
        time: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    getResourceId(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    formatMetadata(
      chainID: number | BN | string,
      identifier: string,
      time: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

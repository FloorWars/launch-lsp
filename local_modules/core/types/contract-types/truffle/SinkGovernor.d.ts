/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SinkGovernorContract
  extends Truffle.Contract<SinkGovernorInstance> {
  "new"(
    _finder: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SinkGovernorInstance>;
}

export interface ExecutedGovernanceTransaction {
  name: "ExecutedGovernanceTransaction";
  args: {
    to: string;
    data: string;
    0: string;
    1: string;
  };
}

type AllEvents = ExecutedGovernanceTransaction;

export interface SinkGovernorInstance extends Truffle.ContractInstance {
  finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * This method should send the arbitrary transaction emitted by the L1 governor on this chain.
   * This method will ultimately be called after a governance execution has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
   * @param data Calldata to include in governance transaction.
   * @param to Contract on this network to send governance transaction to.
   */
  executeGovernance: {
    (to: string, data: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      to: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    finder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * This method should send the arbitrary transaction emitted by the L1 governor on this chain.
     * This method will ultimately be called after a governance execution has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on this network to send governance transaction to.
     */
    executeGovernance: {
      (
        to: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        to: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IUniswapV3PoolDerivedStateContract
  extends Truffle.Contract<IUniswapV3PoolDerivedStateInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IUniswapV3PoolDerivedStateInstance>;
}

type AllEvents = never;

export interface IUniswapV3PoolDerivedStateInstance
  extends Truffle.ContractInstance {
  /**
   * To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
   * Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
   */
  observe(
    secondsAgos: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: BN[] }>;

  /**
   * Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.
   * Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
   * @param tickLower The lower tick of the range
   * @param tickUpper The upper tick of the range
   */
  snapshotCumulativesInside(
    tickLower: number | BN | string,
    tickUpper: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  methods: {
    /**
     * To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.
     * Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp
     * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned
     */
    observe(
      secondsAgos: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: BN[] }>;

    /**
     * Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.
     * Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range
     * @param tickLower The lower tick of the range
     * @param tickUpper The upper tick of the range
     */
    snapshotCumulativesInside(
      tickLower: number | BN | string,
      tickUpper: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

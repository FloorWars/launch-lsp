/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IDepositExecuteContract
  extends Truffle.Contract<IDepositExecuteInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDepositExecuteInstance>;
}

type AllEvents = never;

export interface IDepositExecuteInstance extends Truffle.ContractInstance {
  /**
   * It is intended that deposit are made using the Bridge contract.
   * @param data Consists of additional data needed for a specific deposit.
   * @param depositNonce This value is generated as an ID by the Bridge contract.
   * @param depositer Address of account making the deposit in the Bridge contract.
   * @param destinationChainID Chain ID deposit is expected to be bridged to.
   */
  deposit: {
    (
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      resourceID: string,
      destinationChainID: number | BN | string,
      depositNonce: number | BN | string,
      depositer: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * It is intended that proposals are executed by the Bridge contract.
   * @param data Consists of additional data needed for a specific deposit execution.
   */
  executeProposal: {
    (
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * It is intended that deposit are made using the Bridge contract.
     * @param data Consists of additional data needed for a specific deposit.
     * @param depositNonce This value is generated as an ID by the Bridge contract.
     * @param depositer Address of account making the deposit in the Bridge contract.
     * @param destinationChainID Chain ID deposit is expected to be bridged to.
     */
    deposit: {
      (
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        resourceID: string,
        destinationChainID: number | BN | string,
        depositNonce: number | BN | string,
        depositer: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * It is intended that proposals are executed by the Bridge contract.
     * @param data Consists of additional data needed for a specific deposit execution.
     */
    executeProposal: {
      (
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

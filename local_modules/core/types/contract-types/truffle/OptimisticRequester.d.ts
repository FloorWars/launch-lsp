/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OptimisticRequesterContract
  extends Truffle.Contract<OptimisticRequesterInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<OptimisticRequesterInstance>;
}

type AllEvents = never;

export interface OptimisticRequesterInstance extends Truffle.ContractInstance {
  /**
   * Callback for proposals.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier being requested.
   * @param timestamp timestamp of the price being requested.
   */
  priceProposed: {
    (
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Callback for disputes.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier being requested.
   * @param refund refund received in the case that refundOnDispute was enabled.
   * @param timestamp timestamp of the price being requested.
   */
  priceDisputed: {
    (
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      refund: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Callback for settlement.
   * @param ancillaryData ancillary data of the price being requested.
   * @param identifier price identifier being requested.
   * @param price price that was resolved by the escalation process.
   * @param timestamp timestamp of the price being requested.
   */
  priceSettled: {
    (
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      identifier: string,
      timestamp: number | BN | string,
      ancillaryData: string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Callback for proposals.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier being requested.
     * @param timestamp timestamp of the price being requested.
     */
    priceProposed: {
      (
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Callback for disputes.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier being requested.
     * @param refund refund received in the case that refundOnDispute was enabled.
     * @param timestamp timestamp of the price being requested.
     */
    priceDisputed: {
      (
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        refund: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Callback for settlement.
     * @param ancillaryData ancillary data of the price being requested.
     * @param identifier price identifier being requested.
     * @param price price that was resolved by the escalation process.
     * @param timestamp timestamp of the price being requested.
     */
    priceSettled: {
      (
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        identifier: string,
        timestamp: number | BN | string,
        ancillaryData: string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

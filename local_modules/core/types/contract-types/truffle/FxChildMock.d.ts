/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FxChildMockContract
  extends Truffle.Contract<FxChildMockInstance> {
  "new"(
    _systemCaller: string,
    meta?: Truffle.TransactionDetails
  ): Promise<FxChildMockInstance>;
}

export interface NewFxMessage {
  name: "NewFxMessage";
  args: {
    rootMessageSender: string;
    receiver: string;
    data: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents = NewFxMessage;

export interface FxChildMockInstance extends Truffle.ContractInstance {
  fxRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

  systemCaller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setFxRoot: {
    (_fxRoot: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _fxRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fxRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fxRoot: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onStateReceive: {
    (
      stateId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      stateId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      stateId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      stateId: number | BN | string,
      _data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    fxRoot(txDetails?: Truffle.TransactionDetails): Promise<string>;

    systemCaller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setFxRoot: {
      (_fxRoot: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _fxRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fxRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fxRoot: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    onStateReceive: {
      (
        stateId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        stateId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        stateId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        stateId: number | BN | string,
        _data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

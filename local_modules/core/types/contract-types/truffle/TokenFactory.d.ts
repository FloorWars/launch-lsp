/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TokenFactoryContract
  extends Truffle.Contract<TokenFactoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenFactoryInstance>;
}

type AllEvents = never;

export interface TokenFactoryInstance extends Truffle.ContractInstance {
  /**
   * The caller will become the only minter and burner and the new owner capable of assigning the roles.
   * Create a new token and return it to the caller.
   * @param tokenDecimals used to define the precision used in the token's numerical representation.
   * @param tokenName used to describe the new token.
   * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.
   */
  createToken: {
    (
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenName: string,
      tokenSymbol: string,
      tokenDecimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * The caller will become the only minter and burner and the new owner capable of assigning the roles.
     * Create a new token and return it to the caller.
     * @param tokenDecimals used to define the precision used in the token's numerical representation.
     * @param tokenName used to describe the new token.
     * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.
     */
    createToken: {
      (
        tokenName: string,
        tokenSymbol: string,
        tokenDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenName: string,
        tokenSymbol: string,
        tokenDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        tokenName: string,
        tokenSymbol: string,
        tokenDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenName: string,
        tokenSymbol: string,
        tokenDecimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PerpetualMockContract
  extends Truffle.Contract<PerpetualMockInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PerpetualMockInstance>;
}

export interface EndedSponsorPosition {
  name: "EndedSponsorPosition";
  args: {};
}

export interface LiquidationCreated {
  name: "LiquidationCreated";
  args: {};
}

export interface NewSponsor {
  name: "NewSponsor";
  args: {
    sponsor: string;
    0: string;
  };
}

type AllEvents = EndedSponsorPosition | LiquidationCreated | NewSponsor;

export interface PerpetualMockInstance extends Truffle.ContractInstance {
  collateralRequirement(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  cumulativeFeeMultiplier(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  fundingRate(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: { rawValue: BN };
    1: string;
    2: { rawValue: BN };
    3: BN;
    4: BN;
    5: BN;
  }>;

  liquidationLiveness(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  liquidations(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  positions(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setFundingRate: {
    (
      _fundingRate: {
        rate: { rawValue: number | BN | string };
        identifier: string;
        cumulativeMultiplier: { rawValue: number | BN | string };
        updateTime: number | BN | string;
        applicationTime: number | BN | string;
        proposalTime: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _fundingRate: {
        rate: { rawValue: number | BN | string };
        identifier: string;
        cumulativeMultiplier: { rawValue: number | BN | string };
        updateTime: number | BN | string;
        applicationTime: number | BN | string;
        proposalTime: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fundingRate: {
        rate: { rawValue: number | BN | string };
        identifier: string;
        cumulativeMultiplier: { rawValue: number | BN | string };
        updateTime: number | BN | string;
        applicationTime: number | BN | string;
        proposalTime: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fundingRate: {
        rate: { rawValue: number | BN | string };
        identifier: string;
        cumulativeMultiplier: { rawValue: number | BN | string };
        updateTime: number | BN | string;
        applicationTime: number | BN | string;
        proposalTime: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  applyFundingRate: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    collateralRequirement(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    cumulativeFeeMultiplier(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    fundingRate(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: { rawValue: BN };
      1: string;
      2: { rawValue: BN };
      3: BN;
      4: BN;
      5: BN;
    }>;

    liquidationLiveness(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    liquidations(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    positions(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setFundingRate: {
      (
        _fundingRate: {
          rate: { rawValue: number | BN | string };
          identifier: string;
          cumulativeMultiplier: { rawValue: number | BN | string };
          updateTime: number | BN | string;
          applicationTime: number | BN | string;
          proposalTime: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _fundingRate: {
          rate: { rawValue: number | BN | string };
          identifier: string;
          cumulativeMultiplier: { rawValue: number | BN | string };
          updateTime: number | BN | string;
          applicationTime: number | BN | string;
          proposalTime: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fundingRate: {
          rate: { rawValue: number | BN | string };
          identifier: string;
          cumulativeMultiplier: { rawValue: number | BN | string };
          updateTime: number | BN | string;
          applicationTime: number | BN | string;
          proposalTime: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fundingRate: {
          rate: { rawValue: number | BN | string };
          identifier: string;
          cumulativeMultiplier: { rawValue: number | BN | string };
          updateTime: number | BN | string;
          applicationTime: number | BN | string;
          proposalTime: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    applyFundingRate: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

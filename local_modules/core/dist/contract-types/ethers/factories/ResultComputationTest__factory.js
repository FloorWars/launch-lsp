"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultComputationTest__factory = void 0;
const ethers_1 = require("ethers");
class ResultComputationTest__factory extends ethers_1.ContractFactory {
    constructor(signer) {
        super(_abi, _bytecode, signer);
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ResultComputationTest__factory = ResultComputationTest__factory;
const _abi = [
    {
        inputs: [],
        name: "data",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "rawValue",
                        type: "uint256",
                    },
                ],
                internalType: "struct FixedPoint.Unsigned",
                name: "totalVotes",
                type: "tuple",
            },
            {
                internalType: "int256",
                name: "currentMode",
                type: "int256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "votePrice",
                type: "int256",
            },
            {
                internalType: "uint256",
                name: "numberTokens",
                type: "uint256",
            },
        ],
        name: "wrapAddVote",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "minVoteThreshold",
                type: "uint256",
            },
        ],
        name: "wrapGetResolvedPrice",
        outputs: [
            {
                internalType: "bool",
                name: "isResolved",
                type: "bool",
            },
            {
                internalType: "int256",
                name: "price",
                type: "int256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "revealHash",
                type: "bytes32",
            },
        ],
        name: "wrapWasVoteCorrect",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "wrapGetTotalCorrectlyVotedTokens",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506104f2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806373d4a13a1461005c578063a3c5fe4814610092578063abba0254146100c7578063cc15973f146100dc578063fb7da38c14610106575b600080fd5b60408051602081019091526001548152600254610077919082565b60408051925183526020830191909152015b60405180910390f35b604080516020808201835260009182905260025482528181529082902082518083018452905490819052915191825201610089565b6100da6100d536600461042e565b610129565b005b6100ef6100ea366004610416565b610149565b604080519215158352602083019190915201610089565b610119610114366004610416565b610177565b6040519015158152602001610089565b6040805160208101909152818152610145906000908490610189565b5050565b60008061016e604051806020016040528085815250600061024390919063ffffffff16565b91509150915091565b600061018381836102e6565b92915050565b6040805160208101909152600184015481526101a5908261031f565b516001840155600082815260208481526040918290208251918201909252905481526101d1908261031f565b60008381526020859052604090209051905560028301548214801590610231575060028301546000908152602084815260408083208151808401835290548152858452868352928190208151928301909152548152610231915190511190565b1561023e57600283018290555b505050565b600080600061025d60646102576032610352565b90610387565b604080516020810190915260018701549081905285519192501180156102c45750604080516020808201835260018801548252600288015460009081528882528390208351918201909352915482526102c49183916102bc91906103af565b905190511190565b156102d95760019250846002015491506102de565b600092505b509250929050565b600082600201546040516020016102ff91815260200190565b604051602081830303815290604052805190602001208214905092915050565b604080516020810190915260008152604080516020810190915282518451829161034991906103eb565b90529392505050565b60408051602081019091526000815260408051602081019091528061037f84670de0b6b3a76400006103fe565b905292915050565b604080516020810190915260008152604080516020810190915283518190610349908561040a565b6040805160208101909152600081526040805160208101909152825184518291610349916103e590670de0b6b3a76400006103fe565b9061040a565b60006103f7828461044f565b9392505050565b60006103f78284610487565b60006103f78284610467565b600060208284031215610427578081fd5b5035919050565b60008060408385031215610440578081fd5b50508035926020909101359150565b60008219821115610462576104626104a6565b500190565b60008261048257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156104a1576104a16104a6565b500290565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208931e5ab2e51f120f5feaad895052251ae97655ca4e579ee11362fc29bc3d8fd64736f6c63430008040033";

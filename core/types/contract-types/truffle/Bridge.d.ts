/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BridgeContract extends Truffle.Contract<BridgeInstance> {
  "new"(
    chainID: number | BN | string,
    initialRelayers: string[],
    initialRelayerThreshold: number | BN | string,
    fee: number | BN | string,
    expiry: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<BridgeInstance>;
}

export interface Deposit {
  name: "Deposit";
  args: {
    destinationChainID: BN;
    resourceID: string;
    depositNonce: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface ProposalEvent {
  name: "ProposalEvent";
  args: {
    originChainID: BN;
    depositNonce: BN;
    status: BN;
    resourceID: string;
    dataHash: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: string;
  };
}

export interface ProposalVote {
  name: "ProposalVote";
  args: {
    originChainID: BN;
    depositNonce: BN;
    status: BN;
    resourceID: string;
    0: BN;
    1: BN;
    2: BN;
    3: string;
  };
}

export interface RelayerAdded {
  name: "RelayerAdded";
  args: {
    relayer: string;
    0: string;
  };
}

export interface RelayerRemoved {
  name: "RelayerRemoved";
  args: {
    relayer: string;
    0: string;
  };
}

export interface RelayerThresholdChanged {
  name: "RelayerThresholdChanged";
  args: {
    newThreshold: BN;
    0: BN;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents =
  | Deposit
  | Paused
  | ProposalEvent
  | ProposalVote
  | RelayerAdded
  | RelayerRemoved
  | RelayerThresholdChanged
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked
  | Unpaused;

export interface BridgeInstance extends Truffle.ContractInstance {
  DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  RELAYER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

  _chainID(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  _depositCounts(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  _depositRecords(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _expiry(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  _fee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  _hasVotedOnProposal(
    arg0: number | BN | string,
    arg1: string,
    arg2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _proposals(
    arg0: number | BN | string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN; 3: BN }>;

  _relayerThreshold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  _resourceIDToHandlerAddress(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  _totalProposals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  _totalRelayers(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns true if {relayer} has the relayer role.
   * @param relayer Address to check.
   */
  isRelayer(
    relayer: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
   * @param newAdmin Address that admin role will be granted to.
   */
  renounceAdmin: {
    (newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newAdmin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  adminPauseTransfers: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  adminUnpauseTransfers: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
   * @param newThreshold Value {_relayerThreshold} will be changed to.
   */
  adminChangeRelayerThreshold: {
    (
      newThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newThreshold: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
   * @param relayerAddress Address of relayer to be added.
   */
  adminAddRelayer: {
    (relayerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      relayerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
   * @param relayerAddress Address of relayer to be removed.
   */
  adminRemoveRelayer: {
    (relayerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      relayerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  adminSetResource: {
    (
      handlerAddress: string,
      resourceID: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      handlerAddress: string,
      resourceID: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      handlerAddress: string,
      resourceID: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      handlerAddress: string,
      resourceID: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   */
  adminSetGenericResource: {
    (
      handlerAddress: string,
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      handlerAddress: string,
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      handlerAddress: string,
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      handlerAddress: string,
      resourceID: string,
      contractAddress: string,
      depositFunctionSig: string,
      executeFunctionSig: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  adminSetBurnable: {
    (
      handlerAddress: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      handlerAddress: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      handlerAddress: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      handlerAddress: string,
      tokenAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns a proposal.
   * @param dataHash Hash of data to be provided when deposit proposal is executed.
   * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
   * @param originChainID Chain ID deposit originated from.
   */
  getProposal(
    originChainID: number | BN | string,
    depositNonce: number | BN | string,
    dataHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    _resourceID: string;
    _dataHash: string;
    _yesVotes: string[];
    _noVotes: string[];
    _status: BN;
    _proposedBlock: BN;
  }>;

  /**
   * Changes deposit fee.Only callable by admin.
   * @param newFee Value {_fee} will be updated to.
   */
  adminChangeFee: {
    (
      newFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used to manually withdraw funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
   * @param handlerAddress Address of handler to withdraw from.
   * @param recipient Address to withdraw tokens to.
   * @param tokenAddress Address of token to withdraw.
   */
  adminWithdraw: {
    (
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      handlerAddress: string,
      tokenAddress: string,
      recipient: string,
      amountOrTokenID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
   * @param data Additional data to be passed to specified handler.
   * @param destinationChainID ID of chain deposit will be bridged to.
   * @param resourceID ResourceID used to find address of handler to be used for deposit.
   */
  deposit: {
    (
      destinationChainID: number | BN | string,
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      destinationChainID: number | BN | string,
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      destinationChainID: number | BN | string,
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      destinationChainID: number | BN | string,
      resourceID: string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  voteProposal: {
    (
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      resourceID: string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      resourceID: string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      resourceID: string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      resourceID: string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  cancelProposal: {
    (
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
   * @param chainID ID of chain deposit originated from.
   * @param data Data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   * @param resourceID ResourceID to be used when making deposits.
   */
  executeProposal: {
    (
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      data: string,
      resourceID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      data: string,
      resourceID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      data: string,
      resourceID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      chainID: number | BN | string,
      depositNonce: number | BN | string,
      data: string,
      resourceID: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
   * @param addrs Array of addresses to transfer {amounts} to.
   * @param amounts Array of amonuts to transfer to {addrs}.
   */
  transferFunds: {
    (
      addrs: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      addrs: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      addrs: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      addrs: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    DEFAULT_ADMIN_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    RELAYER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<string>;

    _chainID(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    _depositCounts(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    _depositRecords(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _expiry(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    _fee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    _hasVotedOnProposal(
      arg0: number | BN | string,
      arg1: string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    _proposals(
      arg0: number | BN | string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN; 3: BN }>;

    _relayerThreshold(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    _resourceIDToHandlerAddress(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    _totalProposals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    _totalRelayers(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin: {
      (newAdmin: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newAdmin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold: {
      (
        newThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newThreshold: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer: {
      (relayerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        relayerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer: {
      (relayerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        relayerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource: {
      (
        handlerAddress: string,
        resourceID: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        handlerAddress: string,
        resourceID: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        handlerAddress: string,
        resourceID: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        handlerAddress: string,
        resourceID: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource: {
      (
        handlerAddress: string,
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        handlerAddress: string,
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        handlerAddress: string,
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        handlerAddress: string,
        resourceID: string,
        contractAddress: string,
        depositFunctionSig: string,
        executeFunctionSig: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable: {
      (
        handlerAddress: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        handlerAddress: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        handlerAddress: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        handlerAddress: string,
        tokenAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: number | BN | string,
      depositNonce: number | BN | string,
      dataHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      _resourceID: string;
      _dataHash: string;
      _yesVotes: string[];
      _noVotes: string[];
      _status: BN;
      _proposedBlock: BN;
    }>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee: {
      (
        newFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw: {
      (
        handlerAddress: string,
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        handlerAddress: string,
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        handlerAddress: string,
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        handlerAddress: string,
        tokenAddress: string,
        recipient: string,
        amountOrTokenID: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit: {
      (
        destinationChainID: number | BN | string,
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        destinationChainID: number | BN | string,
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        destinationChainID: number | BN | string,
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        destinationChainID: number | BN | string,
        resourceID: string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal: {
      (
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        resourceID: string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        resourceID: string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        resourceID: string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        resourceID: string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal: {
      (
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        dataHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal: {
      (
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        data: string,
        resourceID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        data: string,
        resourceID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        data: string,
        resourceID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        chainID: number | BN | string,
        depositNonce: number | BN | string,
        data: string,
        resourceID: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds: {
      (
        addrs: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        addrs: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        addrs: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        addrs: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ExpiringMultiPartyCreatorContract
  extends Truffle.Contract<ExpiringMultiPartyCreatorInstance> {
  "new"(
    _finderAddress: string,
    _tokenFactoryAddress: string,
    _timerAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ExpiringMultiPartyCreatorInstance>;
}

export interface CreatedExpiringMultiParty {
  name: "CreatedExpiringMultiParty";
  args: {
    expiringMultiPartyAddress: string;
    deployerAddress: string;
    0: string;
    1: string;
  };
}

type AllEvents = CreatedExpiringMultiParty;

export interface ExpiringMultiPartyCreatorInstance
  extends Truffle.ContractInstance {
  /**
   * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
   */
  getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Will revert if not running in test mode.
   * Sets the current time.
   * @param time timestamp to set current Testable time to.
   */
  setCurrentTime: {
    (
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  timerAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenFactoryAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  createExpiringMultiParty: {
    (
      params: {
        expirationTimestamp: number | BN | string;
        collateralAddress: string;
        priceFeedIdentifier: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: number | BN | string };
        disputeBondPercentage: { rawValue: number | BN | string };
        sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
        disputerDisputeRewardPercentage: { rawValue: number | BN | string };
        minSponsorTokens: { rawValue: number | BN | string };
        withdrawalLiveness: number | BN | string;
        liquidationLiveness: number | BN | string;
        financialProductLibraryAddress: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      params: {
        expirationTimestamp: number | BN | string;
        collateralAddress: string;
        priceFeedIdentifier: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: number | BN | string };
        disputeBondPercentage: { rawValue: number | BN | string };
        sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
        disputerDisputeRewardPercentage: { rawValue: number | BN | string };
        minSponsorTokens: { rawValue: number | BN | string };
        withdrawalLiveness: number | BN | string;
        liquidationLiveness: number | BN | string;
        financialProductLibraryAddress: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      params: {
        expirationTimestamp: number | BN | string;
        collateralAddress: string;
        priceFeedIdentifier: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: number | BN | string };
        disputeBondPercentage: { rawValue: number | BN | string };
        sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
        disputerDisputeRewardPercentage: { rawValue: number | BN | string };
        minSponsorTokens: { rawValue: number | BN | string };
        withdrawalLiveness: number | BN | string;
        liquidationLiveness: number | BN | string;
        financialProductLibraryAddress: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      params: {
        expirationTimestamp: number | BN | string;
        collateralAddress: string;
        priceFeedIdentifier: string;
        syntheticName: string;
        syntheticSymbol: string;
        collateralRequirement: { rawValue: number | BN | string };
        disputeBondPercentage: { rawValue: number | BN | string };
        sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
        disputerDisputeRewardPercentage: { rawValue: number | BN | string };
        minSponsorTokens: { rawValue: number | BN | string };
        withdrawalLiveness: number | BN | string;
        liquidationLiveness: number | BN | string;
        financialProductLibraryAddress: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _getSyntheticDecimals(
    _collateralAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    /**
     * Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.
     */
    getCurrentTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Will revert if not running in test mode.
     * Sets the current time.
     * @param time timestamp to set current Testable time to.
     */
    setCurrentTime: {
      (
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    timerAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokenFactoryAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    createExpiringMultiParty: {
      (
        params: {
          expirationTimestamp: number | BN | string;
          collateralAddress: string;
          priceFeedIdentifier: string;
          syntheticName: string;
          syntheticSymbol: string;
          collateralRequirement: { rawValue: number | BN | string };
          disputeBondPercentage: { rawValue: number | BN | string };
          sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
          disputerDisputeRewardPercentage: { rawValue: number | BN | string };
          minSponsorTokens: { rawValue: number | BN | string };
          withdrawalLiveness: number | BN | string;
          liquidationLiveness: number | BN | string;
          financialProductLibraryAddress: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        params: {
          expirationTimestamp: number | BN | string;
          collateralAddress: string;
          priceFeedIdentifier: string;
          syntheticName: string;
          syntheticSymbol: string;
          collateralRequirement: { rawValue: number | BN | string };
          disputeBondPercentage: { rawValue: number | BN | string };
          sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
          disputerDisputeRewardPercentage: { rawValue: number | BN | string };
          minSponsorTokens: { rawValue: number | BN | string };
          withdrawalLiveness: number | BN | string;
          liquidationLiveness: number | BN | string;
          financialProductLibraryAddress: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        params: {
          expirationTimestamp: number | BN | string;
          collateralAddress: string;
          priceFeedIdentifier: string;
          syntheticName: string;
          syntheticSymbol: string;
          collateralRequirement: { rawValue: number | BN | string };
          disputeBondPercentage: { rawValue: number | BN | string };
          sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
          disputerDisputeRewardPercentage: { rawValue: number | BN | string };
          minSponsorTokens: { rawValue: number | BN | string };
          withdrawalLiveness: number | BN | string;
          liquidationLiveness: number | BN | string;
          financialProductLibraryAddress: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        params: {
          expirationTimestamp: number | BN | string;
          collateralAddress: string;
          priceFeedIdentifier: string;
          syntheticName: string;
          syntheticSymbol: string;
          collateralRequirement: { rawValue: number | BN | string };
          disputeBondPercentage: { rawValue: number | BN | string };
          sponsorDisputeRewardPercentage: { rawValue: number | BN | string };
          disputerDisputeRewardPercentage: { rawValue: number | BN | string };
          minSponsorTokens: { rawValue: number | BN | string };
          withdrawalLiveness: number | BN | string;
          liquidationLiveness: number | BN | string;
          financialProductLibraryAddress: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    _getSyntheticDecimals(
      _collateralAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

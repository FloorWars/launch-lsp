/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ReserveCurrencyLiquidatorContract
  extends Truffle.Contract<ReserveCurrencyLiquidatorInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ReserveCurrencyLiquidatorInstance>;
}

type AllEvents = never;

export interface ReserveCurrencyLiquidatorInstance
  extends Truffle.ContractInstance {
  swapMintLiquidate: {
    (
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidatedSponsor: string,
      minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxTokensToLiquidate: { rawValue: number | BN | string },
      maxSlippage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidatedSponsor: string,
      minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxTokensToLiquidate: { rawValue: number | BN | string },
      maxSlippage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidatedSponsor: string,
      minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxTokensToLiquidate: { rawValue: number | BN | string },
      maxSlippage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      uniswapRouter: string,
      financialContract: string,
      reserveCurrency: string,
      liquidatedSponsor: string,
      minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
      maxTokensToLiquidate: { rawValue: number | BN | string },
      maxSlippage: number | BN | string,
      deadline: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    swapMintLiquidate: {
      (
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidatedSponsor: string,
        minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxTokensToLiquidate: { rawValue: number | BN | string },
        maxSlippage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidatedSponsor: string,
        minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxTokensToLiquidate: { rawValue: number | BN | string },
        maxSlippage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidatedSponsor: string,
        minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxTokensToLiquidate: { rawValue: number | BN | string },
        maxSlippage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        uniswapRouter: string,
        financialContract: string,
        reserveCurrency: string,
        liquidatedSponsor: string,
        minCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxCollateralPerTokenLiquidated: { rawValue: number | BN | string },
        maxTokensToLiquidate: { rawValue: number | BN | string },
        maxSlippage: number | BN | string,
        deadline: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

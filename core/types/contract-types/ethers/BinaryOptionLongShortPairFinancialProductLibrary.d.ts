/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BinaryOptionLongShortPairFinancialProductLibraryInterface
  extends ethers.utils.Interface {
  functions: {
    "longShortPairParameters(address)": FunctionFragment;
    "setLongShortPairParameters(address,int256)": FunctionFragment;
    "percentageLongCollateralAtExpiry(int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "longShortPairParameters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLongShortPairParameters",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "percentageLongCollateralAtExpiry",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "longShortPairParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLongShortPairParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentageLongCollateralAtExpiry",
    data: BytesLike
  ): Result;

  events: {};
}

export class BinaryOptionLongShortPairFinancialProductLibrary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BinaryOptionLongShortPairFinancialProductLibraryInterface;

  functions: {
    longShortPairParameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isSet: boolean; strikePrice: BigNumber }
    >;

    "longShortPairParameters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isSet: boolean; strikePrice: BigNumber }
    >;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    setLongShortPairParameters(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    "setLongShortPairParameters(address,int256)"(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    percentageLongCollateralAtExpiry(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    "percentageLongCollateralAtExpiry(int256)"(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  longShortPairParameters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { isSet: boolean; strikePrice: BigNumber }>;

  "longShortPairParameters(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { isSet: boolean; strikePrice: BigNumber }>;

  /**
   * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
   * Enables any address to set the strike price for an associated binary option.
   * @param longShortPair address of the LSP.
   * @param strikePrice the strike price for the binary option.
   */
  setLongShortPairParameters(
    longShortPair: string,
    strikePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
   * Enables any address to set the strike price for an associated binary option.
   * @param longShortPair address of the LSP.
   * @param strikePrice the strike price for the binary option.
   */
  "setLongShortPairParameters(address,int256)"(
    longShortPair: string,
    strikePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
   * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
   */
  percentageLongCollateralAtExpiry(
    expiryPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
   * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
   */
  "percentageLongCollateralAtExpiry(int256)"(
    expiryPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    longShortPairParameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isSet: boolean; strikePrice: BigNumber }
    >;

    "longShortPairParameters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isSet: boolean; strikePrice: BigNumber }
    >;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    setLongShortPairParameters(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    "setLongShortPairParameters(address,int256)"(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    percentageLongCollateralAtExpiry(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    "percentageLongCollateralAtExpiry(int256)"(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    longShortPairParameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "longShortPairParameters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    setLongShortPairParameters(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    "setLongShortPairParameters(address,int256)"(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    percentageLongCollateralAtExpiry(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    "percentageLongCollateralAtExpiry(int256)"(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    longShortPairParameters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "longShortPairParameters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    setLongShortPairParameters(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Note: a) Any address can set the initial strike price b) A strike can be 0. c) A strike price can only be set once to prevent the deployer from changing the strike after the fact. d) For safety, a strike price should be set before depositing any synthetic tokens in a liquidity pool. e) longShortPair must expose an expirationTimestamp method to validate it is correctly deployed.
     * Enables any address to set the strike price for an associated binary option.
     * @param longShortPair address of the LSP.
     * @param strikePrice the strike price for the binary option.
     */
    "setLongShortPairParameters(address,int256)"(
      longShortPair: string,
      strikePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    percentageLongCollateralAtExpiry(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a number between 0 and 1e18 to indicate how much collateral each long and short token are entitled to per collateralPerPair.
     * @param expiryPrice price from the optimistic oracle for the LSP price identifier.
     */
    "percentageLongCollateralAtExpiry(int256)"(
      expiryPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

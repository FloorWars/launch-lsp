/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SinkOracleInterface extends ethers.utils.Interface {
  functions: {
    "currentChainID()": FunctionFragment;
    "destinationChainID()": FunctionFragment;
    "finder()": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes)": FunctionFragment;
    "validateDeposit(uint8,bytes32,uint256,bytes)": FunctionFragment;
    "executePublishPrice(uint8,bytes32,uint256,bytes,int256)": FunctionFragment;
    "hasPrice(bytes32,uint256,bytes)": FunctionFragment;
    "getPrice(bytes32,uint256,bytes)": FunctionFragment;
    "getResourceId()": FunctionFragment;
    "formatMetadata(uint8,bytes32,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destinationChainID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateDeposit",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executePublishPrice",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "formatMetadata",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destinationChainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePublishPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatMetadata",
    data: BytesLike
  ): Result;

  events: {
    "PriceRequestAdded(uint8,bytes32,uint256,bytes)": EventFragment;
    "PushedPrice(uint8,bytes32,uint256,bytes,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceRequestAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PushedPrice"): EventFragment;
}

export class SinkOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SinkOracleInterface;

  functions: {
    currentChainID(overrides?: CallOverrides): Promise<[number]>;

    "currentChainID()"(overrides?: CallOverrides): Promise<[number]>;

    destinationChainID(overrides?: CallOverrides): Promise<[number]>;

    "destinationChainID()"(overrides?: CallOverrides): Promise<[number]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    executePublishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    "executePublishPrice(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    getResourceId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  currentChainID(overrides?: CallOverrides): Promise<number>;

  "currentChainID()"(overrides?: CallOverrides): Promise<number>;

  destinationChainID(overrides?: CallOverrides): Promise<number>;

  "destinationChainID()"(overrides?: CallOverrides): Promise<number>;

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
   * This is the first method that should be called in order to bridge a price request to Mainnet.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request.
   */
  requestPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
   * This is the first method that should be called in order to bridge a price request to Mainnet.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request.
   */
  "requestPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
   * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param sinkChainID Chain ID for this contract.
   * @param time Timestamp of price request.
   */
  validateDeposit(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
   * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param sinkChainID Chain ID for this contract.
   * @param time Timestamp of price request.
   */
  "validateDeposit(uint8,bytes32,uint256,bytes)"(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
   * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param price Price to publish to this oracle.
   * @param sinkChainID Chain ID for this contract.
   * @param time Timestamp of price request to resolve.
   */
  executePublishPrice(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
   * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
   * @param ancillaryData extra data of price request to resolve.
   * @param identifier Identifier of price request to resolve.
   * @param price Price to publish to this oracle.
   * @param sinkChainID Chain ID for this contract.
   * @param time Timestamp of price request to resolve.
   */
  "executePublishPrice(uint8,bytes32,uint256,bytes,int256)"(
    sinkChainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns whether a price has resolved for the request.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request
   */
  hasPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns whether a price has resolved for the request.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request
   */
  "hasPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Reverts if price is not available.
   * Returns resolved price for the request.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request
   */
  getPrice(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Reverts if price is not available.
   * Returns resolved price for the request.
   * @param ancillaryData extra data of price request.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request
   */
  "getPrice(bytes32,uint256,bytes)"(
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
   */
  getResourceId(overrides?: CallOverrides): Promise<string>;

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
   */
  "getResourceId()"(overrides?: CallOverrides): Promise<string>;

  /**
   * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
   * This helper method is useful for calling Bridge.deposit().
   * @param ancillaryData extra data of price request.
   * @param chainID Chain ID for this contract.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request.
   */
  formatMetadata(
    chainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
   * This helper method is useful for calling Bridge.deposit().
   * @param ancillaryData extra data of price request.
   * @param chainID Chain ID for this contract.
   * @param identifier Identifier of price request.
   * @param time Timestamp of price request.
   */
  "formatMetadata(uint8,bytes32,uint256,bytes)"(
    chainID: BigNumberish,
    identifier: BytesLike,
    time: BigNumberish,
    ancillaryData: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    currentChainID(overrides?: CallOverrides): Promise<number>;

    "currentChainID()"(overrides?: CallOverrides): Promise<number>;

    destinationChainID(overrides?: CallOverrides): Promise<number>;

    "destinationChainID()"(overrides?: CallOverrides): Promise<number>;

    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    executePublishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    "executePublishPrice(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    getResourceId(overrides?: CallOverrides): Promise<string>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<string>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    PriceRequestAdded(
      chainID: BigNumberish | null,
      identifier: BytesLike | null,
      time: null,
      ancillaryData: null
    ): TypedEventFilter<
      [number, string, BigNumber, string],
      {
        chainID: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
      }
    >;

    PushedPrice(
      chainID: BigNumberish | null,
      identifier: BytesLike | null,
      time: null,
      ancillaryData: null,
      price: null
    ): TypedEventFilter<
      [number, string, BigNumber, string, BigNumber],
      {
        chainID: number;
        identifier: string;
        time: BigNumber;
        ancillaryData: string;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    currentChainID(overrides?: CallOverrides): Promise<BigNumber>;

    "currentChainID()"(overrides?: CallOverrides): Promise<BigNumber>;

    destinationChainID(overrides?: CallOverrides): Promise<BigNumber>;

    "destinationChainID()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    executePublishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    "executePublishPrice(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    getResourceId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentChainID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destinationChainID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "destinationChainID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    requestPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Can be called only by a Registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the ultimate price resolution data, and also calls the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to bridge a price request to Mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "requestPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    validateDeposit(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid price request, specifically one that has not resolved yet and was called by a registered contract. Without this check, `Bridge.deposit()` could be called by non-registered contracts to make price requests to the DVM.
     * This method will ultimately be called after `requestPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request.
     */
    "validateDeposit(uint8,bytes32,uint256,bytes)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    executePublishPrice(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should publish the price data for a requested price request. If this method fails for some reason, then it means that the price was never requested. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `publishPrice` has been bridged cross-chain from Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price to publish to this oracle.
     * @param sinkChainID Chain ID for this contract.
     * @param time Timestamp of price request to resolve.
     */
    "executePublishPrice(uint8,bytes32,uint256,bytes,int256)"(
      sinkChainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    hasPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "hasPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    getPrice(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    "getPrice(bytes32,uint256,bytes)"(
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    getResourceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with the SourceOracle.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    formatMetadata(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for calling Bridge.deposit().
     * @param ancillaryData extra data of price request.
     * @param chainID Chain ID for this contract.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    "formatMetadata(uint8,bytes32,uint256,bytes)"(
      chainID: BigNumberish,
      identifier: BytesLike,
      time: BigNumberish,
      ancillaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

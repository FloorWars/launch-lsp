/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SourceGovernorInterface extends ethers.utils.Interface {
  functions: {
    "currentChainId()": FunctionFragment;
    "finder()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "relayGovernance(uint8,address,bytes)": FunctionFragment;
    "verifyRequest(address,bytes)": FunctionFragment;
    "getResourceId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayGovernance",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRequest",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "currentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourceId",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayedGovernanceRequest(uint8,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedGovernanceRequest"): EventFragment;
}

export class SourceGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SourceGovernorInterface;

  functions: {
    currentChainId(overrides?: CallOverrides): Promise<[number]>;

    "currentChainId()"(overrides?: CallOverrides): Promise<[number]>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    "finder()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    relayGovernance(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "relayGovernance(uint8,address,bytes)"(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    verifyRequest(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "verifyRequest(address,bytes)"(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    getResourceId(overrides?: CallOverrides): Promise<[string]>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<[string]>;
  };

  currentChainId(overrides?: CallOverrides): Promise<number>;

  "currentChainId()"(overrides?: CallOverrides): Promise<number>;

  finder(overrides?: CallOverrides): Promise<string>;

  "finder()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
   * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
   * @param data Calldata to include in governance transaction.
   * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
   * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
   */
  relayGovernance(
    destinationChainId: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
   * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
   * @param data Calldata to include in governance transaction.
   * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
   * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
   */
  "relayGovernance(uint8,address,bytes)"(
    destinationChainId: BigNumberish,
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
   * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param data Calldata to include in governance transaction.
   * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
   */
  verifyRequest(
    to: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
   * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
   * @param data Calldata to include in governance transaction.
   * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
   */
  "verifyRequest(address,bytes)"(
    to: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Gets the resource id to send to the bridge.
   */
  getResourceId(overrides?: CallOverrides): Promise<string>;

  /**
   * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
   * Gets the resource id to send to the bridge.
   */
  "getResourceId()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    currentChainId(overrides?: CallOverrides): Promise<number>;

    "currentChainId()"(overrides?: CallOverrides): Promise<number>;

    finder(overrides?: CallOverrides): Promise<string>;

    "finder()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    relayGovernance(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "relayGovernance(uint8,address,bytes)"(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    verifyRequest(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "verifyRequest(address,bytes)"(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    getResourceId(overrides?: CallOverrides): Promise<string>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RelayedGovernanceRequest(
      destinationChainId: BigNumberish | null,
      to: string | null,
      data: BytesLike | null
    ): TypedEventFilter<
      [number, string, string],
      { destinationChainId: number; to: string; data: string }
    >;
  };

  estimateGas: {
    currentChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    "finder()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    relayGovernance(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "relayGovernance(uint8,address,bytes)"(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    verifyRequest(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "verifyRequest(address,bytes)"(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    getResourceId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentChainId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    relayGovernance(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.
     * This is the first method that should be called in order to relay a governance request to another network marked by `destinationChainId`. Note: this can only be called by the owner (presumably the L1 governor).
     * @param data Calldata to include in governance transaction.
     * @param destinationChainId Chain ID of SinkGovernor that this governance request should ultimately be sent to.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "relayGovernance(uint8,address,bytes)"(
      destinationChainId: BigNumberish,
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    verifyRequest(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid relay event.
     * This method will ultimately be called after `relayGovernance` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param data Calldata to include in governance transaction.
     * @param to Contract on network with chain ID `destinationChainId` to send governance transaction to.
     */
    "verifyRequest(address,bytes)"(
      to: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    getResourceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Gets the resource id to send to the bridge.
     */
    "getResourceId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface UniswapV3Broker extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): UniswapV3Broker;
  clone(): UniswapV3Broker;
  methods: {
    /**
     * The desired price is represented as sqrtRatioTargetX96. This is the Price^(1/2) * 96^2.The caller must approve this contract to spend whichever token is intended to be swapped.
     * Swaps an amount of either pool tokens such that the trade results in the uniswap pair's price equaling a desired price.
     * @param deadline to limit when the trade can execute. If the tx is mined after this timestamp then revert.
     * @param recipient address that the output tokens should be sent to.
     * @param sqrtRatioTargetX96 target, encoded price.
     * @param tradingAsEOA bool to indicate if the UniswapBroker is being called by a DSProxy or an EOA.
     * @param uniswapPool address of the pool to uniswap v3 trade against.
     * @param uniswapRouter address of the uniswap v3 router to route the trade.
     */
    swapToPrice(
      tradingAsEOA: boolean,
      uniswapPool: string,
      uniswapRouter: string,
      sqrtRatioTargetX96: number | string | BN,
      recipient: string,
      deadline: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}

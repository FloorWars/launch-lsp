/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type PriceRequestAdded = ContractEventLog<{
  chainID: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PushedPrice = ContractEventLog<{
  chainID: string;
  identifier: string;
  time: string;
  ancillaryData: string;
  price: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface SourceOracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SourceOracle;
  clone(): SourceOracle;
  methods: {
    currentChainID(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    /**
     * Publishes the DVM resolved price for the price request, or reverts if not resolved yet. Will call the local Bridge's deposit() method which will emit a Deposit event in order to signal to an off-chain relayer to begin the cross-chain process.
     * This is the first method that should be called in order to publish a price request to another network marked by `sinkChainID`.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    publishPrice(
      sinkChainID: number | string | BN,
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * This method should basically check that the `Bridge.deposit()` was triggered by a valid publish event.
     * This method will ultimately be called after `publishPrice` calls `Bridge.deposit()`, which will call `GenericHandler.deposit()` and ultimately this method.
     * @param ancillaryData extra data of price request to resolve.
     * @param identifier Identifier of price request to resolve.
     * @param price Price resolved on DVM to send to SinkOracle.
     * @param sinkChainID Chain ID of SinkOracle that this price should ultimately be sent to.
     * @param time Timestamp of price request to resolve.
     */
    validateDeposit(
      sinkChainID: number | string | BN,
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      price: number | string | BN
    ): NonPayableTransactionObject<void>;

    /**
     * This method should prepare this oracle to receive a published price and then forward the price request to the DVM. Can only be called by the `GenericHandler`.
     * This method will ultimately be called after a `requestPrice` has been bridged cross-chain from non-Mainnet to this network via an off-chain relayer. The relayer will call `Bridge.executeProposal` on this local network, which call `GenericHandler.executeProposal()` and ultimately this method.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param sinkChainID Chain ID of SinkOracle that originally sent price request.
     * @param time Timestamp of price request.
     */
    executeRequestPrice(
      sinkChainID: number | string | BN,
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * More details about Resource ID's here: https://chainbridge.chainsafe.io/spec/#resource-id
     * Convenience method to get cross-chain Bridge resource ID linking this contract with its SinkOracles.
     */
    getResourceId(): NonPayableTransactionObject<string>;

    /**
     * GenericHandler.deposit() expects data to be formatted as:     len(data)                              uint256     bytes  0  - 32     data                                   bytes       bytes  32 - END
     * This helper method is useful for shaping metadata that is passed into Bridge.deposit() that will ultimately be used to publish a price on the SinkOracle.
     * @param ancillaryData extra data of price request to publish.
     * @param chainID Chain ID of SinkOracle to publish price to.
     * @param identifier Identifier of price request to publish.
     * @param time Timestamp of price request to publish.
     */
    formatMetadata(
      chainID: number | string | BN,
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[],
      price: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    PriceRequestAdded(cb?: Callback<PriceRequestAdded>): EventEmitter;
    PriceRequestAdded(
      options?: EventOptions,
      cb?: Callback<PriceRequestAdded>
    ): EventEmitter;

    PushedPrice(cb?: Callback<PushedPrice>): EventEmitter;
    PushedPrice(
      options?: EventOptions,
      cb?: Callback<PushedPrice>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "PriceRequestAdded", cb: Callback<PriceRequestAdded>): void;
  once(
    event: "PriceRequestAdded",
    options: EventOptions,
    cb: Callback<PriceRequestAdded>
  ): void;

  once(event: "PushedPrice", cb: Callback<PushedPrice>): void;
  once(
    event: "PushedPrice",
    options: EventOptions,
    cb: Callback<PushedPrice>
  ): void;
}

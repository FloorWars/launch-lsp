/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MessageSent = ContractEventLog<{
  message: string;
  0: string;
}>;
export type PriceRequestAdded = ContractEventLog<{
  identifier: string;
  time: string;
  ancillaryData: string;
  requestHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PushedPrice = ContractEventLog<{
  identifier: string;
  time: string;
  ancillaryData: string;
  price: string;
  requestHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;

export interface OracleChildTunnel extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OracleChildTunnel;
  clone(): OracleChildTunnel;
  methods: {
    ancillaryBytesLimit(): NonPayableTransactionObject<string>;

    finder(): NonPayableTransactionObject<string>;

    fxChild(): NonPayableTransactionObject<string>;

    fxRootTunnel(): NonPayableTransactionObject<string>;

    processMessageFromRoot(
      stateId: number | string | BN,
      rootMessageSender: string,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    setFxRootTunnel(_fxRootTunnel: string): NonPayableTransactionObject<void>;

    /**
     * Can be called only by a registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the price resolution data from mainnet. Emits a message that will be included in regular checkpoint of all sidechain transactions to mainnet.
     * This should be called to bridge a price request to mainnet.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request.
     */
    requestPrice(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<void>;

    /**
     * Returns whether a price has resolved for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    hasPrice(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<boolean>;

    /**
     * Reverts if price is not available.
     * Returns resolved price for the request.
     * @param ancillaryData extra data of price request.
     * @param identifier Identifier of price request.
     * @param time Timestamp of price request
     */
    getPrice(
      identifier: string | number[],
      time: number | string | BN,
      ancillaryData: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Generates stamped ancillary data in the format that it would be used in the case of a price request.
     * @param ancillaryData ancillary data of the price being requested.
     * @param requester sender of the initial price request.
     */
    stampAncillaryData(
      ancillaryData: string | number[],
      requester: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    MessageSent(cb?: Callback<MessageSent>): EventEmitter;
    MessageSent(
      options?: EventOptions,
      cb?: Callback<MessageSent>
    ): EventEmitter;

    PriceRequestAdded(cb?: Callback<PriceRequestAdded>): EventEmitter;
    PriceRequestAdded(
      options?: EventOptions,
      cb?: Callback<PriceRequestAdded>
    ): EventEmitter;

    PushedPrice(cb?: Callback<PushedPrice>): EventEmitter;
    PushedPrice(
      options?: EventOptions,
      cb?: Callback<PushedPrice>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "MessageSent", cb: Callback<MessageSent>): void;
  once(
    event: "MessageSent",
    options: EventOptions,
    cb: Callback<MessageSent>
  ): void;

  once(event: "PriceRequestAdded", cb: Callback<PriceRequestAdded>): void;
  once(
    event: "PriceRequestAdded",
    options: EventOptions,
    cb: Callback<PriceRequestAdded>
  ): void;

  once(event: "PushedPrice", cb: Callback<PushedPrice>): void;
  once(
    event: "PushedPrice",
    options: EventOptions,
    cb: Callback<PushedPrice>
  ): void;
}
